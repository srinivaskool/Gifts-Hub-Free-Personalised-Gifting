{"version":3,"sources":["../../src/api/error.ts","../../src/context.ts","../../src/serializer.ts","../../src/api/service.ts","../../src/config.ts","../../index.ts","../../src/interfaces/internal-message-payload.ts","../../src/util/errors.ts","../../src/util/constants.ts","../../src/helpers/array-base64-translator.ts","../../src/helpers/migrate-old-database.ts","../../src/helpers/idb-manager.ts","../../src/core/api.ts","../../src/core/token-management.ts","../../src/helpers/is-console-message.ts","../../src/helpers/sleep.ts","../../src/controllers/sw-controller.ts","../../src/helpers/externalizePayload.ts","../../src/controllers/window-controller.ts","../../src/helpers/extract-app-config.ts","../../src/index.ts","../../src/services/api_service.ts","../../src/utils/errors.ts","../../src/constants.ts","../../src/utils/console_logger.ts","../../src/services/settings_service.ts","../../src/utils/string_merger.ts","../../src/services/iid_service.ts","../../src/utils/attributes_utils.ts","../../src/services/remote_config_service.ts","../../src/services/initialization_service.ts","../../src/services/transport_service.ts","../../src/services/perf_logger.ts","../../src/utils/metric_utils.ts","../../src/resources/trace.ts","../../src/resources/network_request.ts","../../src/services/oob_resources_service.ts","../../src/controllers/perf.ts","../../src/client/caching_client.ts","../../src/errors.ts","../../src/client/rest_client.ts","../../src/language.ts","../../src/client/remote_config_fetch_client.ts","../../src/value.ts","../../src/remote_config.ts","../../src/storage/storage.ts","../../src/storage/storage_cache.ts","../../src/client/retrying_client.ts","../../app/index.ts"],"names":["errorCodeMap","OK","CANCELLED","UNKNOWN","INVALID_ARGUMENT","DEADLINE_EXCEEDED","NOT_FOUND","ALREADY_EXISTS","PERMISSION_DENIED","UNAUTHENTICATED","RESOURCE_EXHAUSTED","FAILED_PRECONDITION","ABORTED","OUT_OF_RANGE","UNIMPLEMENTED","INTERNAL","UNAVAILABLE","DATA_LOSS","code","message","details","Object","setPrototypeOf","HttpsErrorImpl","prototype","Error","authProvider","messagingProvider","auth","messaging","this","getImmediate","optional","get","then","getAuthToken","undefined","getToken","token","accessToken","getInstanceIdToken","self","Notification","permission","e","getContext","authToken","instanceIdToken","mapValues","o","f","result","key","hasOwnProperty","encode","data","Number","valueOf","isFinite","toString","call","Array","isArray","map","x","decode","json","value","isNaN","app_","regionOrCustomDomain_","fetchImpl","serializer","Serializer","emulatorOrigin","delete","Promise","resolve","deleteService","contextProvider","cancelAllRequests","url","URL","customDomain","origin","region","_url","name","projectId","options","useEmulator","host","port","useFunctionsEmulator","httpsCallable","postJSON","body","headers","method","JSON","stringify","response","status","context","timeout","millis","timer","promise","_","reject","setTimeout","failAfter","failAfterPromise","race","clearTimeoutWrapper","error","bodyJSON","codeForHTTPStatus","description","errorJSON","_errorForResponse","responseData","clearTimeout","instance","namespaceExports","Functions","registerComponent","container","regionOrCustomDomain","app","getProvider","setServiceProps","setMultipleInstances","MessageType","ERROR_MAP","ERROR_FACTORY","DEFAULT_VAPID_KEY","arrayToBase64","array","uint8Array","Uint8Array","btoa","String","fromCharCode","replace","base64ToArray","base64String","base64","repeat","length","rawData","atob","outputArray","i","charCodeAt","migrateOldDatabase","senderId","indexedDB","databases","db","includes","tokenDetails","oldVersion","objectStoreNames","contains","objectStore","transaction","index","clear","oldDetails","p256dh","endpoint","fcmToken","createTime","Date","now","subscriptionOptions","swScope","vapidKey","close","checkTokenDetails","OBJECT_STORE_NAME","dbPromise","getDbPromise","upgradeDb","createObjectStore","dbGet","firebaseDependencies","getKey","appConfig","oldTokenDetails","dbSet","tx","put","complete","dbRemove","appId","requestGetToken","getHeaders","getBody","subscribeOptions","fetch","getEndpoint","create","errorInfo","requestUpdateToken","updateOptions","requestDeleteToken","unsubscribeOptions","ENDPOINT","installations","Headers","Accept","apiKey","web","applicationPubKey","swRegistration","getPushSubscription","pushSubscription","scope","getNewToken","dbOptions","currentOptions","isVapidKeyEqual","isEndpointEqual","isAuthEqual","isP256dhEqual","isTokenValid","console","warn","updateToken","deleteToken","pushManager","getSubscription","unsubscribe","updatedToken","updatedTokenDetails","subscription","subscribe","userVisibleOnly","applicationServerKey","isConsoleMessage","sleep","ms","isOnBackgroundMessageUsed","bgMessageHandler","addEventListener","waitUntil","onPush","onSubChange","onNotificationClick","setBackgroundMessageHandler","callback","onBackgroundMessage","nextOrObserver","registration","requestPermission","usePublicVapidKey","useServiceWorker","onMessage","onTokenRefresh","event","internalPayload","err","getMessagePayloadInternal","getClientList","debug","TAG","clientList","some","client","visibilityState","startsWith","hasVisibleClients","sendMessagePayloadInternalToWindows","isNotificationShown","notification","showNotification","wrapInternalPayload","payload","from","collapseKey","collapse_key","messagePayloadInternal","title","image","propagateNotificationPayload","propagateDataPayload","fcmOptions","link","analyticsLabel","analytics_label","propagateFcmOptions","externalizePayload","next","action","stopImmediatePropagation","click_action","location","getLink","href","originUrl","getWindowClient","clients","openWindow","focus","messageType","NOTIFICATION_CLICKED","isFirebaseMessaging","postMessage","wrappedInternalPayload","clientUrl","PUSH_RECEIVED","matchAll","type","includeUncontrolled","notificationPayloadInternal","actions","maxActions","onMessageCallback","navigator","serviceWorker","messageEventListener","stripInternalFields","assign","dataPayload","logEvent","getVapidKey","getSwReg","updateVapidKey","updateSwReg","serviceWorkerRegistration","registerDefaultSw","ServiceWorkerRegistration","register","update","catch","browserErrorMessage","permissionResult","eventType","getEventType","analyticsProvider","message_id","message_name","message_time","message_device_time","Math","floor","getMissingValueError","valueName","keyName","appName","messagingSenderId","apiInstance","windowInstance","ERROR_DESCRIPTION_MAP","consoleLogger","logLevel","INFO","settingsServiceInstance","window","performance","PerformanceObserver","windowLocation","document","cookieEnabled","localStorage","perfMetrics","onFirstInputDelay","getUrl","split","mark","measure","measureName","mark1","mark2","getEntriesByType","getEntriesByName","getTimeOrigin","timeOrigin","timing","navigationStart","requiredApisAvailable","info","setupObserver","entryType","list","getEntries","entry","observe","entryTypes","getInstance","Api","mergeStrings","part1","part2","sizeDiff","resultArray","push","charAt","join","iid","VisibilityState","instrumentationEnabled","dataCollectionEnabled","loggingEnabled","tracesSamplingRate","networkRequestsSamplingRate","logEndPointUrl","flTransportEndpointUrl","transportKey","logSource","logTraceAfterSampling","logNetworkAfterSampling","configTimeToLive","getAppId","firebaseAppInstance","getProjectId","getApiKey","getFlTransportFullUrl","concat","SettingsService","getIid","RESERVED_ATTRIBUTE_PREFIXES","ATTRIBUTE_FORMAT_REGEX","RegExp","getServiceWorkerStatus","controller","getVisibilityState","VISIBLE","HIDDEN","getEffectiveConnectionType","navigatorConnection","connection","effectiveType","DEFAULT_CONFIGS","getConfig","config","expiryString","getItem","expiry","configStringified","parse","getStoredConfig","processConfig","authTokenPromise","installationsService","authTokenVal","getAuthTokenPromise","configEndPoint","request","Request","Authorization","FIS_AUTH_PREFIX","app_instance_id","app_instance_id_token","app_id","app_version","sdk_version","ok","getRemoteConfig","setItem","storeConfig","entries","fpr_enabled","fpr_log_source","fpr_log_endpoint_url","fpr_log_transport_key","fpr_vc_network_request_sampling_rate","fpr_vc_trace_sampling_rate","shouldLogAfterSampling","samplingRate","random","initializationPromise","initializationStatus","getInitializationPromise","readyState","removeEventListener","getDocumentReadyComplete","iidPromise","getId","iidVal","getIidPromise","changeInitializationStatus","remainingTries","queue","isTransportSetup","processQueue","timeOffset","staged","log_event","evt","source_extension_json_proto3","event_time_ms","eventTime","flTransportFullUrl","postToFlEndpoint","res","transportWait","nextRequestWaitMillis","requestOffset","max","logResponseDetails","responseAction","sendEventsToFl","request_time_ms","client_info","client_type","js_client_info","log_source","dispatchQueueEvents","addToQueue","sendLog","resource","resourceType","args","transportHandler","logTrace","trace","settingsService","isAuto","sendTraceLog","networkRequest","networkRequestMetric","http_method","httpMethod","http_response_code","response_payload_bytes","responsePayloadBytes","client_start_time_us","startTimeUs","time_to_response_initiated_us","timeToResponseInitiatedUs","time_to_response_completed_us","timeToResponseCompletedUs","perfMetric","application_info","getApplicationInfo","network_request_metric","serializeNetworkRequest","traceMetric","is_auto","duration_us","durationUs","keys","counters","customAttributes","getAttributes","custom_attributes","trace_metric","serializeTrace","google_app_id","web_app_info","page_url","service_worker_status","visibility_state","effective_connection_type","application_process_state","oobMetrics","traceMeasureName","state","api","randomId","traceStartMark","TRACE_START_MARK_PREFIX","traceStopMark","TRACE_STOP_MARK_PREFIX","traceMeasure","TRACE_MEASURE_PREFIX","calculateTraceMetrics","start","traceName","stop","record","startTime","duration","attributes","metrics","metric","incrementMetric","counter","numAsInteger","putMetric","indexOf","customMetricName","providedValue","valueAsInteger","convertMetricValueToInteger","getMetric","putAttribute","attr","isValidName","prefix","match","isValidValue","isValidCustomAttributeValue","attributeName","attributeValue","getAttribute","removeAttribute","setStartTime","setDuration","perfMeasureEntries","perfMeasureEntry","createOobTrace","navigationTimings","paintTimings","firstInputDelay","route","Trace","timeOriginUs","domInteractive","domContentLoadedEventEnd","loadEventEnd","firstPaint","find","paintObject","firstContentfulPaint","createUserTimingTrace","createNetworkRequestEntry","performanceEntry","responseStart","responseEnd","networkRequestUrl","logEndpointUrl","flEndpointUrl","logNetworkRequest","transferSize","setupOobResources","fid","setupOobTraces","resources","setupNetworkRequests","measures","setupUserTimingTraces","substring","isAvailable","val","storage","storageCache","logger","isCachedDataFresh","cacheMaxAgeMillis","lastSuccessfulFetchTimestampMillis","cacheAgeMillis","all","getLastSuccessfulFetchTimestampMillis","getLastSuccessfulFetchResponse","lastSuccessfulFetchResponse","eTag","storageOperations","setLastSuccessfulFetchTimestampMillis","setLastSuccessfulFetchResponse","firebaseInstallations","sdkVersion","namespace","installationId","installationToken","urlBase","FIREBASE_REMOTE_CONFIG_URL_BASE","requestBody","language_code","navigatorLanguage","languages","language","fetchPromise","timeoutPromise","_resolve","signal","errorCode","originalErrorMessage","responseEtag","responseBody","httpStatus","listeners","listener","abort","forEach","BOOLEAN_TRUTHY_VALUES","_source","_value","asString","asBoolean","toLowerCase","asNumber","num","getSource","_client","_storageCache","_storage","_logger","_isInitializationComplete","settings","fetchTimeoutMillis","minimumFetchIntervalMillis","defaultConfig","setLogLevel","FirebaseLogLevel","DEBUG","SILENT","ERROR","getLastFetchStatus","activate","getActiveConfigEtag","activeConfigEtag","setActiveConfig","setActiveConfigEtag","ensureInitialized","_initializePromise","loadFromStorage","abortSignal","RemoteConfigAbortSignal","setLastFetchStatus","lastFetchStatus","fetchAndActivate","getAll","obj1","obj2","getAllKeys","getActiveConfig","reduce","allConfigs","getValue","getBoolean","getNumber","getString","activeConfig","Value","toFirebaseError","originalError","target","openDbPromise","open","onerror","onsuccess","onupgradeneeded","keyPath","set","timestamp","etag","getThrottleMetadata","setThrottleMetadata","metadata","deleteThrottleMetadata","compositeKey","createCompositeKey","lastFetchStatusPromise","lastSuccessfulFetchTimestampMillisPromise","activeConfigPromise","timestampMillis","setAbortableTimeout","throttleEndTimeMillis","backoffMillis","firebaseInstance","throttleMetadata","backoffCount","attemptFetch","customData","isRetriableError","restClient","SDK_VERSION","retryingClient","cachingClient","remoteConfigInstance","registerVersion"],"mappings":"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","file":"static/js/2.df13ed2e.chunk.js","sourcesContent":["/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { HttpsError, FunctionsErrorCode } from '@firebase/functions-types';\nimport { Serializer } from '../serializer';\nimport { HttpResponseBody } from './service';\n\n/**\n * Standard error codes for different ways a request can fail, as defined by:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * This map is used primarily to convert from a backend error code string to\n * a client SDK error code string, and make sure it's in the supported set.\n */\nconst errorCodeMap: { [name: string]: FunctionsErrorCode } = {\n  OK: 'ok',\n  CANCELLED: 'cancelled',\n  UNKNOWN: 'unknown',\n  INVALID_ARGUMENT: 'invalid-argument',\n  DEADLINE_EXCEEDED: 'deadline-exceeded',\n  NOT_FOUND: 'not-found',\n  ALREADY_EXISTS: 'already-exists',\n  PERMISSION_DENIED: 'permission-denied',\n  UNAUTHENTICATED: 'unauthenticated',\n  RESOURCE_EXHAUSTED: 'resource-exhausted',\n  FAILED_PRECONDITION: 'failed-precondition',\n  ABORTED: 'aborted',\n  OUT_OF_RANGE: 'out-of-range',\n  UNIMPLEMENTED: 'unimplemented',\n  INTERNAL: 'internal',\n  UNAVAILABLE: 'unavailable',\n  DATA_LOSS: 'data-loss'\n};\n\n/**\n * An explicit error that can be thrown from a handler to send an error to the\n * client that called the function.\n */\nexport class HttpsErrorImpl extends Error implements HttpsError {\n  /**\n   * A standard error code that will be returned to the client. This also\n   * determines the HTTP status code of the response, as defined in code.proto.\n   */\n  readonly code: FunctionsErrorCode;\n\n  /**\n   * Extra data to be converted to JSON and included in the error response.\n   */\n  readonly details?: unknown;\n\n  constructor(code: FunctionsErrorCode, message?: string, details?: unknown) {\n    super(message);\n\n    // This is a workaround for a bug in TypeScript when extending Error:\n    // tslint:disable-next-line\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(this, HttpsErrorImpl.prototype);\n\n    this.code = code;\n    this.details = details;\n  }\n}\n\n/**\n * Takes an HTTP status code and returns the corresponding ErrorCode.\n * This is the standard HTTP status code -> error mapping defined in:\n * https://github.com/googleapis/googleapis/blob/master/google/rpc/code.proto\n *\n * @param status An HTTP status code.\n * @return The corresponding ErrorCode, or ErrorCode.UNKNOWN if none.\n */\nfunction codeForHTTPStatus(status: number): FunctionsErrorCode {\n  // Make sure any successful status is OK.\n  if (status >= 200 && status < 300) {\n    return 'ok';\n  }\n  switch (status) {\n    case 0:\n      // This can happen if the server returns 500.\n      return 'internal';\n    case 400:\n      return 'invalid-argument';\n    case 401:\n      return 'unauthenticated';\n    case 403:\n      return 'permission-denied';\n    case 404:\n      return 'not-found';\n    case 409:\n      return 'aborted';\n    case 429:\n      return 'resource-exhausted';\n    case 499:\n      return 'cancelled';\n    case 500:\n      return 'internal';\n    case 501:\n      return 'unimplemented';\n    case 503:\n      return 'unavailable';\n    case 504:\n      return 'deadline-exceeded';\n    default: // ignore\n  }\n  return 'unknown';\n}\n\n/**\n * Takes an HTTP response and returns the corresponding Error, if any.\n */\nexport function _errorForResponse(\n  status: number,\n  bodyJSON: HttpResponseBody | null,\n  serializer: Serializer\n): Error | null {\n  let code = codeForHTTPStatus(status);\n\n  // Start with reasonable defaults from the status code.\n  let description: string = code;\n\n  let details: unknown = undefined;\n\n  // Then look through the body for explicit details.\n  try {\n    const errorJSON = bodyJSON && bodyJSON.error;\n    if (errorJSON) {\n      const status = errorJSON.status;\n      if (typeof status === 'string') {\n        if (!errorCodeMap[status]) {\n          // They must've included an unknown error code in the body.\n          return new HttpsErrorImpl('internal', 'internal');\n        }\n        code = errorCodeMap[status];\n\n        // TODO(klimt): Add better default descriptions for error enums.\n        // The default description needs to be updated for the new code.\n        description = status;\n      }\n\n      const message = errorJSON.message;\n      if (typeof message === 'string') {\n        description = message;\n      }\n\n      details = errorJSON.details;\n      if (details !== undefined) {\n        details = serializer.decode(details);\n      }\n    }\n  } catch (e) {\n    // If we couldn't parse explicit error data, that's fine.\n  }\n\n  if (code === 'ok') {\n    // Technically, there's an edge case where a developer could explicitly\n    // return an error code of OK, and we will treat it as success, but that\n    // seems reasonable.\n    return null;\n  }\n\n  return new HttpsErrorImpl(code, description, details);\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { _FirebaseApp } from '@firebase/app-types/private';\nimport {\n  FirebaseMessaging,\n  FirebaseMessagingName\n} from '@firebase/messaging-types';\nimport {\n  FirebaseAuthInternal,\n  FirebaseAuthInternalName\n} from '@firebase/auth-interop-types';\nimport { Provider } from '@firebase/component';\n\n/**\n * The metadata that should be supplied with function calls.\n */\nexport interface Context {\n  authToken?: string;\n  instanceIdToken?: string;\n}\n\n/**\n * Helper class to get metadata that should be included with a function call.\n */\nexport class ContextProvider {\n  private auth: FirebaseAuthInternal | null = null;\n  private messaging: FirebaseMessaging | null = null;\n  constructor(\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>\n  ) {\n    this.auth = authProvider.getImmediate({ optional: true });\n    this.messaging = messagingProvider.getImmediate({\n      optional: true\n    });\n\n    if (!this.auth) {\n      authProvider.get().then(\n        auth => (this.auth = auth),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n\n    if (!this.messaging) {\n      messagingProvider.get().then(\n        messaging => (this.messaging = messaging),\n        () => {\n          /* get() never rejects */\n        }\n      );\n    }\n  }\n\n  async getAuthToken(): Promise<string | undefined> {\n    if (!this.auth) {\n      return undefined;\n    }\n\n    try {\n      const token = await this.auth.getToken();\n      if (!token) {\n        return undefined;\n      }\n      return token.accessToken;\n    } catch (e) {\n      // If there's any error when trying to get the auth token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getInstanceIdToken(): Promise<string | undefined> {\n    if (\n      !this.messaging ||\n      !('Notification' in self) ||\n      Notification.permission !== 'granted'\n    ) {\n      return undefined;\n    }\n\n    try {\n      return this.messaging.getToken();\n    } catch (e) {\n      // We don't warn on this, because it usually means messaging isn't set up.\n      // console.warn('Failed to retrieve instance id token.', e);\n\n      // If there's any error when trying to get the token, leave it off.\n      return undefined;\n    }\n  }\n\n  async getContext(): Promise<Context> {\n    const authToken = await this.getAuthToken();\n    const instanceIdToken = await this.getInstanceIdToken();\n    return { authToken, instanceIdToken };\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconst LONG_TYPE = 'type.googleapis.com/google.protobuf.Int64Value';\nconst UNSIGNED_LONG_TYPE = 'type.googleapis.com/google.protobuf.UInt64Value';\n\nfunction mapValues(\n  // { [k: string]: unknown } is no longer a wildcard assignment target after typescript 3.5\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  o: { [key: string]: any },\n  f: (arg0: unknown) => unknown\n): object {\n  const result: { [key: string]: unknown } = {};\n  for (const key in o) {\n    if (o.hasOwnProperty(key)) {\n      result[key] = f(o[key]);\n    }\n  }\n  return result;\n}\n\nexport class Serializer {\n  // Takes data and encodes it in a JSON-friendly way, such that types such as\n  // Date are preserved.\n  encode(data: unknown): unknown {\n    if (data == null) {\n      return null;\n    }\n    if (data instanceof Number) {\n      data = data.valueOf();\n    }\n    if (typeof data === 'number' && isFinite(data)) {\n      // Any number in JS is safe to put directly in JSON and parse as a double\n      // without any loss of precision.\n      return data;\n    }\n    if (data === true || data === false) {\n      return data;\n    }\n    if (Object.prototype.toString.call(data) === '[object String]') {\n      return data;\n    }\n    if (Array.isArray(data)) {\n      return data.map(x => this.encode(x));\n    }\n    if (typeof data === 'function' || typeof data === 'object') {\n      return mapValues(data!, x => this.encode(x));\n    }\n    // If we got this far, the data is not encodable.\n    throw new Error('Data cannot be encoded in JSON: ' + data);\n  }\n\n  // Takes data that's been encoded in a JSON-friendly form and returns a form\n  // with richer datatypes, such as Dates, etc.\n  decode(json: unknown): unknown {\n    if (json == null) {\n      return json;\n    }\n    if ((json as { [key: string]: unknown })['@type']) {\n      switch ((json as { [key: string]: unknown })['@type']) {\n        case LONG_TYPE:\n        // Fall through and handle this the same as unsigned.\n        case UNSIGNED_LONG_TYPE: {\n          // Technically, this could work return a valid number for malformed\n          // data if there was a number followed by garbage. But it's just not\n          // worth all the extra code to detect that case.\n          const value = Number((json as { [key: string]: unknown })['value']);\n          if (isNaN(value)) {\n            throw new Error('Data cannot be decoded from JSON: ' + json);\n          }\n          return value;\n        }\n        default: {\n          throw new Error('Data cannot be decoded from JSON: ' + json);\n        }\n      }\n    }\n    if (Array.isArray(json)) {\n      return json.map(x => this.decode(x));\n    }\n    if (typeof json === 'function' || typeof json === 'object') {\n      return mapValues(json!, x => this.decode(x));\n    }\n    // Anything else is safe to return.\n    return json;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport {\n  FirebaseFunctions,\n  HttpsCallable,\n  HttpsCallableResult,\n  HttpsCallableOptions\n} from '@firebase/functions-types';\nimport { _errorForResponse, HttpsErrorImpl } from './error';\nimport { ContextProvider } from '../context';\nimport { Serializer } from '../serializer';\nimport { Provider } from '@firebase/component';\nimport { FirebaseAuthInternalName } from '@firebase/auth-interop-types';\nimport { FirebaseMessagingName } from '@firebase/messaging-types';\n\n/**\n * The response to an http request.\n */\ninterface HttpResponse {\n  status: number;\n  json: HttpResponseBody | null;\n}\n/**\n * Describes the shape of the HttpResponse body.\n * It makes functions that would otherwise take {} able to access the\n * possible elements in the body more easily\n */\nexport interface HttpResponseBody {\n  data?: unknown;\n  result?: unknown;\n  error?: {\n    message?: unknown;\n    status?: unknown;\n    details?: unknown;\n  };\n}\n\n/**\n * Returns a Promise that will be rejected after the given duration.\n * The error will be of type HttpsErrorImpl.\n *\n * @param millis Number of milliseconds to wait before rejecting.\n */\nfunction failAfter(\n  millis: number\n): {\n  timer: number | NodeJS.Timeout;\n  promise: Promise<never>;\n} {\n  let timer!: number | NodeJS.Timeout;\n  const promise = new Promise<never>((_, reject) => {\n    timer = setTimeout(() => {\n      reject(new HttpsErrorImpl('deadline-exceeded', 'deadline-exceeded'));\n    }, millis);\n  });\n\n  return {\n    timer,\n    promise\n  };\n}\n\n/**\n * The main class for the Firebase Functions SDK.\n */\nexport class Service implements FirebaseFunctions, FirebaseService {\n  private readonly contextProvider: ContextProvider;\n  private readonly serializer = new Serializer();\n  private emulatorOrigin: string | null = null;\n  private cancelAllRequests: Promise<void>;\n  private deleteService!: () => void;\n  private region: string;\n  private customDomain: string | null;\n\n  /**\n   * Creates a new Functions service for the given app and (optional) region or custom domain.\n   * @param app_ The FirebaseApp to use.\n   * @param regionOrCustomDomain_ one of:\n   *   a) A region to call functions from, such as us-central1\n   *   b) A custom domain to use as a functions prefix, such as https://mydomain.com\n   */\n  constructor(\n    private app_: FirebaseApp,\n    authProvider: Provider<FirebaseAuthInternalName>,\n    messagingProvider: Provider<FirebaseMessagingName>,\n    regionOrCustomDomain_: string = 'us-central1',\n    readonly fetchImpl: typeof fetch\n  ) {\n    this.contextProvider = new ContextProvider(authProvider, messagingProvider);\n    // Cancels all ongoing requests when resolved.\n    this.cancelAllRequests = new Promise(resolve => {\n      this.deleteService = () => {\n        return resolve();\n      };\n    });\n\n    // Resolve the region or custom domain overload by attempting to parse it.\n    try {\n      const url = new URL(regionOrCustomDomain_);\n      this.customDomain = url.origin;\n      this.region = 'us-central1';\n    } catch (e) {\n      this.customDomain = null;\n      this.region = regionOrCustomDomain_;\n    }\n  }\n\n  get app(): FirebaseApp {\n    return this.app_;\n  }\n\n  INTERNAL = {\n    delete: (): Promise<void> => {\n      return Promise.resolve(this.deleteService());\n    }\n  };\n\n  /**\n   * Returns the URL for a callable with the given name.\n   * @param name The name of the callable.\n   */\n  _url(name: string): string {\n    const projectId = this.app_.options.projectId;\n    if (this.emulatorOrigin !== null) {\n      const origin = this.emulatorOrigin;\n      return `${origin}/${projectId}/${this.region}/${name}`;\n    }\n\n    if (this.customDomain !== null) {\n      return `${this.customDomain}/${name}`;\n    }\n\n    return `https://${this.region}-${projectId}.cloudfunctions.net/${name}`;\n  }\n\n  /**\n   * Modify this instance to communicate with the Cloud Functions emulator.\n   *\n   * Note: this must be called before this instance has been used to do any operations.\n   *\n   * @param host The emulator host (ex: localhost)\n   * @param port The emulator port (ex: 5001)\n   */\n  useEmulator(host: string, port: number): void {\n    this.emulatorOrigin = `http://${host}:${port}`;\n  }\n\n  /**\n   * Changes this instance to point to a Cloud Functions emulator running\n   * locally. See https://firebase.google.com/docs/functions/local-emulator\n   *\n   * @deprecated Prefer the useEmulator(host, port) method.\n   * @param origin The origin of the local emulator, such as\n   * \"http://localhost:5005\".\n   */\n  useFunctionsEmulator(origin: string): void {\n    this.emulatorOrigin = origin;\n  }\n\n  /**\n   * Returns a reference to the callable https trigger with the given name.\n   * @param name The name of the trigger.\n   */\n  httpsCallable(name: string, options?: HttpsCallableOptions): HttpsCallable {\n    return data => {\n      return this.call(name, data, options || {});\n    };\n  }\n\n  /**\n   * Does an HTTP POST and returns the completed response.\n   * @param url The url to post to.\n   * @param body The JSON body of the post.\n   * @param headers The HTTP headers to include in the request.\n   * @return A Promise that will succeed when the request finishes.\n   */\n  private async postJSON(\n    url: string,\n    body: {},\n    headers: { [key: string]: string }\n  ): Promise<HttpResponse> {\n    headers['Content-Type'] = 'application/json';\n\n    let response: Response;\n    try {\n      response = await this.fetchImpl(url, {\n        method: 'POST',\n        body: JSON.stringify(body),\n        headers\n      });\n    } catch (e) {\n      // This could be an unhandled error on the backend, or it could be a\n      // network error. There's no way to know, since an unhandled error on the\n      // backend will fail to set the proper CORS header, and thus will be\n      // treated as a network error by fetch.\n      return {\n        status: 0,\n        json: null\n      };\n    }\n    let json: HttpResponseBody | null = null;\n    try {\n      json = await response.json();\n    } catch (e) {\n      // If we fail to parse JSON, it will fail the same as an empty body.\n    }\n    return {\n      status: response.status,\n      json\n    };\n  }\n\n  /**\n   * Calls a callable function asynchronously and returns the result.\n   * @param name The name of the callable trigger.\n   * @param data The data to pass as params to the function.s\n   */\n  private async call(\n    name: string,\n    data: unknown,\n    options: HttpsCallableOptions\n  ): Promise<HttpsCallableResult> {\n    const url = this._url(name);\n\n    // Encode any special types, such as dates, in the input data.\n    data = this.serializer.encode(data);\n    const body = { data };\n\n    // Add a header for the authToken.\n    const headers: { [key: string]: string } = {};\n    const context = await this.contextProvider.getContext();\n    if (context.authToken) {\n      headers['Authorization'] = 'Bearer ' + context.authToken;\n    }\n    if (context.instanceIdToken) {\n      headers['Firebase-Instance-ID-Token'] = context.instanceIdToken;\n    }\n\n    // Default timeout to 70s, but let the options override it.\n    const timeout = options.timeout || 70000;\n\n    const { timer, promise: failAfterPromise } = failAfter(timeout);\n\n    const response = await Promise.race([\n      clearTimeoutWrapper(timer, this.postJSON(url, body, headers)),\n      failAfterPromise,\n      clearTimeoutWrapper(timer, this.cancelAllRequests)\n    ]);\n\n    // If service was deleted, interrupted response throws an error.\n    if (!response) {\n      throw new HttpsErrorImpl(\n        'cancelled',\n        'Firebase Functions instance was deleted.'\n      );\n    }\n\n    // Check for an error status, regardless of http status.\n    const error = _errorForResponse(\n      response.status,\n      response.json,\n      this.serializer\n    );\n    if (error) {\n      throw error;\n    }\n\n    if (!response.json) {\n      throw new HttpsErrorImpl(\n        'internal',\n        'Response is not valid JSON object.'\n      );\n    }\n\n    let responseData = response.json.data;\n    // TODO(klimt): For right now, allow \"result\" instead of \"data\", for\n    // backwards compatibility.\n    if (typeof responseData === 'undefined') {\n      responseData = response.json.result;\n    }\n    if (typeof responseData === 'undefined') {\n      // Consider the response malformed.\n      throw new HttpsErrorImpl('internal', 'Response is missing data field.');\n    }\n\n    // Decode any special types, such as dates, in the returned data.\n    const decodedData = this.serializer.decode(responseData);\n\n    return { data: decodedData };\n  }\n}\n\nasync function clearTimeoutWrapper<T>(\n  timer: number | NodeJS.Timeout,\n  promise: Promise<T>\n): Promise<T> {\n  const result = await promise;\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  clearTimeout(timer as any);\n  return result;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Service } from './api/service';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\n\n/**\n * Type constant for Firebase Functions.\n */\nconst FUNCTIONS_TYPE = 'functions';\n\nexport function registerFunctions(\n  instance: _FirebaseNamespace,\n  fetchImpl: typeof fetch\n): void {\n  const namespaceExports = {\n    // no-inline\n    Functions: Service\n  };\n\n  function factory(\n    container: ComponentContainer,\n    regionOrCustomDomain?: string\n  ): Service {\n    // Dependencies\n    const app = container.getProvider('app').getImmediate();\n    const authProvider = container.getProvider('auth-internal');\n    const messagingProvider = container.getProvider('messaging');\n\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    return new Service(\n      app,\n      authProvider,\n      messagingProvider,\n      regionOrCustomDomain,\n      fetchImpl\n    );\n  }\n  instance.INTERNAL.registerComponent(\n    new Component(FUNCTIONS_TYPE, factory, ComponentType.PUBLIC)\n      .setServiceProps(namespaceExports)\n      .setMultipleInstances(true)\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport '@firebase/installations';\nimport { _FirebaseNamespace } from '@firebase/app-types/private';\nimport { RemoteConfig as RemoteConfigType } from '@firebase/remote-config-types';\nimport { CachingClient } from './src/client/caching_client';\nimport { RestClient } from './src/client/rest_client';\nimport { RemoteConfig } from './src/remote_config';\nimport { Storage } from './src/storage/storage';\nimport { StorageCache } from './src/storage/storage_cache';\nimport { ERROR_FACTORY, ErrorCode } from './src/errors';\nimport { RetryingClient } from './src/client/retrying_client';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\nimport { name as packageName, version } from './package.json';\nimport {\n  Component,\n  ComponentType,\n  ComponentContainer\n} from '@firebase/component';\n\n// Facilitates debugging by enabling settings changes without rebuilding asset.\n// Note these debug options are not part of a documented, supported API and can change at any time.\n// Consolidates debug options for easier discovery.\n// Uses transient variables on window to avoid lingering state causing panic.\ndeclare global {\n  interface Window {\n    FIREBASE_REMOTE_CONFIG_URL_BASE: string;\n  }\n}\n\nexport function registerRemoteConfig(\n  firebaseInstance: _FirebaseNamespace\n): void {\n  firebaseInstance.INTERNAL.registerComponent(\n    new Component(\n      'remoteConfig',\n      remoteConfigFactory,\n      ComponentType.PUBLIC\n    ).setMultipleInstances(true)\n  );\n\n  firebaseInstance.registerVersion(packageName, version);\n\n  function remoteConfigFactory(\n    container: ComponentContainer,\n    namespace?: string\n  ): RemoteConfig {\n    /* Dependencies */\n    // getImmediate for FirebaseApp will always succeed\n    const app = container.getProvider('app').getImmediate();\n    // The following call will always succeed because rc has `import '@firebase/installations'`\n    const installations = container.getProvider('installations').getImmediate();\n\n    // Guards against the SDK being used in non-browser environments.\n    if (typeof window === 'undefined') {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_WINDOW);\n    }\n\n    // Normalizes optional inputs.\n    const { projectId, apiKey, appId } = app.options;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_PROJECT_ID);\n    }\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_API_KEY);\n    }\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.REGISTRATION_APP_ID);\n    }\n    namespace = namespace || 'firebase';\n\n    const storage = new Storage(appId, app.name, namespace);\n    const storageCache = new StorageCache(storage);\n\n    const logger = new Logger(packageName);\n\n    // Sets ERROR as the default log level.\n    // See RemoteConfig#setLogLevel for corresponding normalization to ERROR log level.\n    logger.logLevel = FirebaseLogLevel.ERROR;\n\n    const restClient = new RestClient(\n      installations,\n      // Uses the JS SDK version, by which the RC package version can be deduced, if necessary.\n      firebaseInstance.SDK_VERSION,\n      namespace,\n      projectId,\n      apiKey,\n      appId\n    );\n    const retryingClient = new RetryingClient(restClient, storage);\n    const cachingClient = new CachingClient(\n      retryingClient,\n      storage,\n      storageCache,\n      logger\n    );\n\n    const remoteConfigInstance = new RemoteConfig(\n      app,\n      cachingClient,\n      storageCache,\n      storage,\n      logger\n    );\n\n    // Starts warming cache.\n    // eslint-disable-next-line @typescript-eslint/no-floating-promises\n    remoteConfigInstance.ensureInitialized();\n\n    return remoteConfigInstance;\n  }\n}\n\nregisterRemoteConfig(firebase as _FirebaseNamespace);\n\ndeclare module '@firebase/app-types' {\n  interface FirebaseNamespace {\n    remoteConfig?: {\n      (app?: FirebaseApp): RemoteConfigType;\n    };\n  }\n  interface FirebaseApp {\n    remoteConfig(): RemoteConfigType;\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except\n * in compliance with the License. You may obtain a copy of the License at\n *\n * http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software distributed under the License\n * is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express\n * or implied. See the License for the specific language governing permissions and limitations under\n * the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME\n} from '../util/constants';\n\nexport interface MessagePayloadInternal {\n  notification?: NotificationPayloadInternal;\n  data?: unknown;\n  fcmOptions?: FcmOptionsInternal;\n  messageType?: MessageType;\n  isFirebaseMessaging?: boolean;\n  from: string;\n  // eslint-disable-next-line camelcase\n  collapse_key: string;\n}\n\nexport interface NotificationPayloadInternal extends NotificationOptions {\n  title: string;\n  // Supported in the Legacy Send API.\n  // See:https://firebase.google.com/docs/cloud-messaging/xmpp-server-ref.\n  // eslint-disable-next-line camelcase\n  click_action?: string;\n}\n\n// Defined in\n// https://firebase.google.com/docs/reference/fcm/rest/v1/projects.messages#webpushfcmoptions. Note\n// that the keys are sent to the clients in snake cases which we need to convert to camel so it can\n// be exposed as a type to match the Firebase API convention.\nexport interface FcmOptionsInternal {\n  link?: string;\n\n  // eslint-disable-next-line camelcase\n  analytics_label?: string;\n}\n\nexport enum MessageType {\n  PUSH_RECEIVED = 'push-received',\n  NOTIFICATION_CLICKED = 'notification-clicked'\n}\n\n/** Additional data of a message sent from the FN Console. */\nexport interface ConsoleMessageData {\n  [CONSOLE_CAMPAIGN_ID]: string;\n  [CONSOLE_CAMPAIGN_TIME]: string;\n  [CONSOLE_CAMPAIGN_NAME]?: string;\n  [CONSOLE_CAMPAIGN_ANALYTICS_ENABLED]?: '1';\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, ErrorMap } from '@firebase/util';\n\nexport const enum ErrorCode {\n  MISSING_APP_CONFIG_VALUES = 'missing-app-config-values',\n  AVAILABLE_IN_WINDOW = 'only-available-in-window',\n  AVAILABLE_IN_SW = 'only-available-in-sw',\n  PERMISSION_DEFAULT = 'permission-default',\n  PERMISSION_BLOCKED = 'permission-blocked',\n  UNSUPPORTED_BROWSER = 'unsupported-browser',\n  FAILED_DEFAULT_REGISTRATION = 'failed-service-worker-registration',\n  TOKEN_SUBSCRIBE_FAILED = 'token-subscribe-failed',\n  TOKEN_SUBSCRIBE_NO_TOKEN = 'token-subscribe-no-token',\n  TOKEN_UNSUBSCRIBE_FAILED = 'token-unsubscribe-failed',\n  TOKEN_UPDATE_FAILED = 'token-update-failed',\n  TOKEN_UPDATE_NO_TOKEN = 'token-update-no-token',\n  INVALID_BG_HANDLER = 'invalid-bg-handler',\n  USE_SW_AFTER_GET_TOKEN = 'use-sw-after-get-token',\n  INVALID_SW_REGISTRATION = 'invalid-sw-registration',\n  USE_VAPID_KEY_AFTER_GET_TOKEN = 'use-vapid-key-after-get-token',\n  INVALID_VAPID_KEY = 'invalid-vapid-key'\n}\n\nexport const ERROR_MAP: ErrorMap<ErrorCode> = {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]:\n    'Missing App configuration value: \"{$valueName}\"',\n  [ErrorCode.AVAILABLE_IN_WINDOW]:\n    'This method is available in a Window context.',\n  [ErrorCode.AVAILABLE_IN_SW]:\n    'This method is available in a service worker context.',\n  [ErrorCode.PERMISSION_DEFAULT]:\n    'The notification permission was not granted and dismissed instead.',\n  [ErrorCode.PERMISSION_BLOCKED]:\n    'The notification permission was not granted and blocked instead.',\n  [ErrorCode.UNSUPPORTED_BROWSER]:\n    \"This browser doesn't support the API's required to use the firebase SDK.\",\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]:\n    'We are unable to register the default service worker. {$browserErrorMessage}',\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]:\n    'A problem occurred while subscribing the user to FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN]:\n    'FCM returned no token when subscribing the user to push.',\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]:\n    'A problem occurred while unsubscribing the ' +\n    'user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_FAILED]:\n    'A problem occurred while updating the user from FCM: {$errorInfo}',\n  [ErrorCode.TOKEN_UPDATE_NO_TOKEN]:\n    'FCM returned no token when updating the user to push.',\n  [ErrorCode.USE_SW_AFTER_GET_TOKEN]:\n    'The useServiceWorker() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your service worker is used.',\n  [ErrorCode.INVALID_SW_REGISTRATION]:\n    'The input to useServiceWorker() must be a ServiceWorkerRegistration.',\n  [ErrorCode.INVALID_BG_HANDLER]:\n    'The input to setBackgroundMessageHandler() must be a function.',\n  [ErrorCode.INVALID_VAPID_KEY]: 'The public VAPID key must be a string.',\n  [ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN]:\n    'The usePublicVapidKey() method may only be called once and must be ' +\n    'called before calling getToken() to ensure your VAPID key is used.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.MISSING_APP_CONFIG_VALUES]: {\n    valueName: string;\n  };\n  [ErrorCode.FAILED_DEFAULT_REGISTRATION]: { browserErrorMessage: string };\n  [ErrorCode.TOKEN_SUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UNSUBSCRIBE_FAILED]: { errorInfo: string };\n  [ErrorCode.TOKEN_UPDATE_FAILED]: { errorInfo: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'messaging',\n  'Messaging',\n  ERROR_MAP\n);\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport const DEFAULT_SW_PATH = '/firebase-messaging-sw.js';\nexport const DEFAULT_SW_SCOPE = '/firebase-cloud-messaging-push-scope';\n\nexport const DEFAULT_VAPID_KEY =\n  'BDOU99-h67HcA6JeFXHbSNMu7e2yNNu3RzoMj8TM4W88jITfq7ZmPvIM1Iv-4_l2LxQcYwhqby2xGpWwzjfAnG4';\n\nexport const ENDPOINT = 'https://fcmregistrations.googleapis.com/v1';\n\n// Key of FCM Payload in Notification's data field.\nexport const FCM_MSG = 'FCM_MSG';\nexport const TAG = 'FirebaseMessaging: ';\n\n// Set to '1' if Analytics is enabled for the campaign\nexport const CONSOLE_CAMPAIGN_ANALYTICS_ENABLED = 'google.c.a.e';\nexport const CONSOLE_CAMPAIGN_ID = 'google.c.a.c_id';\nexport const CONSOLE_CAMPAIGN_TIME = 'google.c.a.ts';\nexport const CONSOLE_CAMPAIGN_NAME = 'google.c.a.c_l';\n\n// Due to the fact that onBackgroundMessage can't be awaited (to support rxjs), a silent push\n// warning might be shown by the browser if the callback fails to completes by the end of onPush.\n// Experiments were ran to determine the majority onBackground message clock time. This brief\n// blocking time would allow majority of the onBackgroundMessage callback to finish.\nexport const BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS = 1000;\n\n// Preparation time for client to initialize and set up the message handler.\nexport const FOREGROUND_HANDLE_PREPARATION_TIME_MS = 3000;\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nexport function arrayToBase64(array: Uint8Array | ArrayBuffer): string {\n  const uint8Array = new Uint8Array(array);\n  const base64String = btoa(String.fromCharCode(...uint8Array));\n  return base64String.replace(/=/g, '').replace(/\\+/g, '-').replace(/\\//g, '_');\n}\n\nexport function base64ToArray(base64String: string): Uint8Array {\n  const padding = '='.repeat((4 - (base64String.length % 4)) % 4);\n  const base64 = (base64String + padding)\n    .replace(/\\-/g, '+')\n    .replace(/_/g, '/');\n\n  const rawData = atob(base64);\n  const outputArray = new Uint8Array(rawData.length);\n\n  for (let i = 0; i < rawData.length; ++i) {\n    outputArray[i] = rawData.charCodeAt(i);\n  }\n  return outputArray;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { deleteDb, openDb } from 'idb';\n\nimport { TokenDetails } from '../interfaces/token-details';\nimport { arrayToBase64 } from './array-base64-translator';\n\n// https://github.com/firebase/firebase-js-sdk/blob/7857c212f944a2a9eb421fd4cb7370181bc034b5/packages/messaging/src/interfaces/token-details.ts\nexport interface V2TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: string | Uint8Array;\n  subscription: PushSubscription;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  createTime?: number;\n  endpoint?: string;\n  auth?: string;\n  p256dh?: string;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/6b5b15ce4ea3df5df5df8a8b33a4e41e249c7715/packages/messaging/src/interfaces/token-details.ts\nexport interface V3TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  fcmPushSet: string;\n  endpoint: string;\n  auth: ArrayBuffer;\n  p256dh: ArrayBuffer;\n  createTime: number;\n}\n\n// https://github.com/firebase/firebase-js-sdk/blob/9567dba664732f681fa7fe60f5b7032bb1daf4c9/packages/messaging/src/interfaces/token-details.ts\nexport interface V4TokenDetails {\n  fcmToken: string;\n  swScope: string;\n  vapidKey: Uint8Array;\n  fcmSenderId: string;\n  endpoint: string;\n  auth: ArrayBufferLike;\n  p256dh: ArrayBufferLike;\n  createTime: number;\n}\n\nconst OLD_DB_NAME = 'fcm_token_details_db';\n/**\n * The last DB version of 'fcm_token_details_db' was 4. This is one higher, so that the upgrade\n * callback is called for all versions of the old DB.\n */\nconst OLD_DB_VERSION = 5;\nconst OLD_OBJECT_STORE_NAME = 'fcm_token_object_Store';\n\nexport async function migrateOldDatabase(\n  senderId: string\n): Promise<TokenDetails | null> {\n  if ('databases' in indexedDB) {\n    // indexedDb.databases() is an IndexedDB v3 API and does not exist in all browsers. TODO: Remove\n    // typecast when it lands in TS types.\n    const databases = await (indexedDB as {\n      databases(): Promise<Array<{ name: string; version: number }>>;\n    }).databases();\n    const dbNames = databases.map(db => db.name);\n\n    if (!dbNames.includes(OLD_DB_NAME)) {\n      // old DB didn't exist, no need to open.\n      return null;\n    }\n  }\n\n  let tokenDetails: TokenDetails | null = null;\n\n  const db = await openDb(OLD_DB_NAME, OLD_DB_VERSION, async db => {\n    if (db.oldVersion < 2) {\n      // Database too old, skip migration.\n      return;\n    }\n\n    if (!db.objectStoreNames.contains(OLD_OBJECT_STORE_NAME)) {\n      // Database did not exist. Nothing to do.\n      return;\n    }\n\n    const objectStore = db.transaction.objectStore(OLD_OBJECT_STORE_NAME);\n    const value = await objectStore.index('fcmSenderId').get(senderId);\n    await objectStore.clear();\n\n    if (!value) {\n      // No entry in the database, nothing to migrate.\n      return;\n    }\n\n    if (db.oldVersion === 2) {\n      const oldDetails = value as V2TokenDetails;\n\n      if (!oldDetails.auth || !oldDetails.p256dh || !oldDetails.endpoint) {\n        return;\n      }\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime ?? Date.now(),\n        subscriptionOptions: {\n          auth: oldDetails.auth,\n          p256dh: oldDetails.p256dh,\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey:\n            typeof oldDetails.vapidKey === 'string'\n              ? oldDetails.vapidKey\n              : arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 3) {\n      const oldDetails = value as V3TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    } else if (db.oldVersion === 4) {\n      const oldDetails = value as V4TokenDetails;\n\n      tokenDetails = {\n        token: oldDetails.fcmToken,\n        createTime: oldDetails.createTime,\n        subscriptionOptions: {\n          auth: arrayToBase64(oldDetails.auth),\n          p256dh: arrayToBase64(oldDetails.p256dh),\n          endpoint: oldDetails.endpoint,\n          swScope: oldDetails.swScope,\n          vapidKey: arrayToBase64(oldDetails.vapidKey)\n        }\n      };\n    }\n  });\n  db.close();\n\n  // Delete all old databases.\n  await deleteDb(OLD_DB_NAME);\n  await deleteDb('fcm_vapid_details_db');\n  await deleteDb('undefined');\n\n  return checkTokenDetails(tokenDetails) ? tokenDetails : null;\n}\n\nfunction checkTokenDetails(\n  tokenDetails: TokenDetails | null\n): tokenDetails is TokenDetails {\n  if (!tokenDetails || !tokenDetails.subscriptionOptions) {\n    return false;\n  }\n  const { subscriptionOptions } = tokenDetails;\n  return (\n    typeof tokenDetails.createTime === 'number' &&\n    tokenDetails.createTime > 0 &&\n    typeof tokenDetails.token === 'string' &&\n    tokenDetails.token.length > 0 &&\n    typeof subscriptionOptions.auth === 'string' &&\n    subscriptionOptions.auth.length > 0 &&\n    typeof subscriptionOptions.p256dh === 'string' &&\n    subscriptionOptions.p256dh.length > 0 &&\n    typeof subscriptionOptions.endpoint === 'string' &&\n    subscriptionOptions.endpoint.length > 0 &&\n    typeof subscriptionOptions.swScope === 'string' &&\n    subscriptionOptions.swScope.length > 0 &&\n    typeof subscriptionOptions.vapidKey === 'string' &&\n    subscriptionOptions.vapidKey.length > 0\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DB, deleteDb, openDb } from 'idb';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { TokenDetails } from '../interfaces/token-details';\nimport { migrateOldDatabase } from './migrate-old-database';\n\n// Exported for tests.\nexport const DATABASE_NAME = 'firebase-messaging-database';\nconst DATABASE_VERSION = 1;\nconst OBJECT_STORE_NAME = 'firebase-messaging-store';\n\nlet dbPromise: Promise<DB> | null = null;\nfunction getDbPromise(): Promise<DB> {\n  if (!dbPromise) {\n    dbPromise = openDb(DATABASE_NAME, DATABASE_VERSION, upgradeDb => {\n      // We don't use 'break' in this switch statement, the fall-through behavior is what we want,\n      // because if there are multiple versions between the old version and the current version, we\n      // want ALL the migrations that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (upgradeDb.oldVersion) {\n        case 0:\n          upgradeDb.createObjectStore(OBJECT_STORE_NAME);\n      }\n    });\n  }\n  return dbPromise;\n}\n\n/** Gets record(s) from the objectStore that match the given key. */\nexport async function dbGet(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<TokenDetails | undefined> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tokenDetails = await db\n    .transaction(OBJECT_STORE_NAME)\n    .objectStore(OBJECT_STORE_NAME)\n    .get(key);\n\n  if (tokenDetails) {\n    return tokenDetails;\n  } else {\n    // Check if there is a tokenDetails object in the old DB.\n    const oldTokenDetails = await migrateOldDatabase(\n      firebaseDependencies.appConfig.senderId\n    );\n    if (oldTokenDetails) {\n      await dbSet(firebaseDependencies, oldTokenDetails);\n      return oldTokenDetails;\n    }\n  }\n}\n\n/** Assigns or overwrites the record for the given key with the given value. */\nexport async function dbSet(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<TokenDetails> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).put(tokenDetails, key);\n  await tx.complete;\n  return tokenDetails;\n}\n\n/** Removes record(s) from the objectStore that match the given key. */\nexport async function dbRemove(\n  firebaseDependencies: FirebaseInternalDependencies\n): Promise<void> {\n  const key = getKey(firebaseDependencies);\n  const db = await getDbPromise();\n  const tx = db.transaction(OBJECT_STORE_NAME, 'readwrite');\n  await tx.objectStore(OBJECT_STORE_NAME).delete(key);\n  await tx.complete;\n}\n\n/** Deletes the DB. Useful for tests. */\nexport async function dbDelete(): Promise<void> {\n  if (dbPromise) {\n    (await dbPromise).close();\n    await deleteDb(DATABASE_NAME);\n    dbPromise = null;\n  }\n}\n\nfunction getKey({ appConfig }: FirebaseInternalDependencies): string {\n  return appConfig.appId;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { DEFAULT_VAPID_KEY, ENDPOINT } from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\nexport interface ApiResponse {\n  token?: string;\n  error?: { message: string };\n}\n\nexport interface ApiRequestBody {\n  web: {\n    endpoint: string;\n    p256dh: string;\n    auth: string;\n    applicationPubKey?: string;\n  };\n}\n\nexport async function requestGetToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(subscriptionOptions);\n\n  const subscribeOptions = {\n    method: 'POST',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      getEndpoint(firebaseDependencies.appConfig),\n      subscribeOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_SUBSCRIBE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestUpdateToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  tokenDetails: TokenDetails\n): Promise<string> {\n  const headers = await getHeaders(firebaseDependencies);\n  const body = getBody(tokenDetails.subscriptionOptions!);\n\n  const updateOptions = {\n    method: 'PATCH',\n    headers,\n    body: JSON.stringify(body)\n  };\n\n  let responseData: ApiResponse;\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${tokenDetails.token}`,\n      updateOptions\n    );\n    responseData = await response.json();\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: err\n    });\n  }\n\n  if (responseData.error) {\n    const message = responseData.error.message;\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_FAILED, {\n      errorInfo: message\n    });\n  }\n\n  if (!responseData.token) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UPDATE_NO_TOKEN);\n  }\n\n  return responseData.token;\n}\n\nexport async function requestDeleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  token: string\n): Promise<void> {\n  const headers = await getHeaders(firebaseDependencies);\n\n  const unsubscribeOptions = {\n    method: 'DELETE',\n    headers\n  };\n\n  try {\n    const response = await fetch(\n      `${getEndpoint(firebaseDependencies.appConfig)}/${token}`,\n      unsubscribeOptions\n    );\n    const responseData: ApiResponse = await response.json();\n    if (responseData.error) {\n      const message = responseData.error.message;\n      throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n        errorInfo: message\n      });\n    }\n  } catch (err) {\n    throw ERROR_FACTORY.create(ErrorCode.TOKEN_UNSUBSCRIBE_FAILED, {\n      errorInfo: err\n    });\n  }\n}\n\nfunction getEndpoint({ projectId }: AppConfig): string {\n  return `${ENDPOINT}/projects/${projectId!}/registrations`;\n}\n\nasync function getHeaders({\n  appConfig,\n  installations\n}: FirebaseInternalDependencies): Promise<Headers> {\n  const authToken = await installations.getToken();\n\n  return new Headers({\n    'Content-Type': 'application/json',\n    Accept: 'application/json',\n    'x-goog-api-key': appConfig.apiKey!,\n    'x-goog-firebase-installations-auth': `FIS ${authToken}`\n  });\n}\n\nfunction getBody({\n  p256dh,\n  auth,\n  endpoint,\n  vapidKey\n}: SubscriptionOptions): ApiRequestBody {\n  const body: ApiRequestBody = {\n    web: {\n      endpoint,\n      auth,\n      p256dh\n    }\n  };\n\n  if (vapidKey !== DEFAULT_VAPID_KEY) {\n    body.web.applicationPubKey = vapidKey;\n  }\n\n  return body;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { SubscriptionOptions, TokenDetails } from '../interfaces/token-details';\nimport {\n  arrayToBase64,\n  base64ToArray\n} from '../helpers/array-base64-translator';\nimport { dbGet, dbRemove, dbSet } from '../helpers/idb-manager';\nimport { requestDeleteToken, requestGetToken, requestUpdateToken } from './api';\n\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\n\n/** UpdateRegistration will be called once every week. */\nconst TOKEN_EXPIRATION_MS = 7 * 24 * 60 * 60 * 1000; // 7 days\n\nexport async function getToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<string> {\n  if (Notification.permission !== 'granted') {\n    throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n  }\n\n  // If a PushSubscription exists it's returned, otherwise a new subscription is generated and\n  // returned.\n  const pushSubscription = await getPushSubscription(swRegistration, vapidKey);\n  const tokenDetails = await dbGet(firebaseDependencies);\n\n  const subscriptionOptions: SubscriptionOptions = {\n    vapidKey,\n    swScope: swRegistration.scope,\n    endpoint: pushSubscription.endpoint,\n    auth: arrayToBase64(pushSubscription.getKey('auth')!),\n    p256dh: arrayToBase64(pushSubscription.getKey('p256dh')!)\n  };\n\n  if (!tokenDetails) {\n    // No token, get a new one.\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (\n    !isTokenValid(tokenDetails.subscriptionOptions!, subscriptionOptions)\n  ) {\n    // Invalid token, get a new one.\n    try {\n      await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    } catch (e) {\n      // Suppress errors because of #2364\n      console.warn(e);\n    }\n\n    return getNewToken(firebaseDependencies, subscriptionOptions);\n  } else if (Date.now() >= tokenDetails.createTime + TOKEN_EXPIRATION_MS) {\n    // Weekly token refresh\n    return updateToken(\n      {\n        token: tokenDetails.token,\n        createTime: Date.now(),\n        subscriptionOptions\n      },\n      firebaseDependencies,\n      swRegistration\n    );\n  } else {\n    // Valid token, nothing to do.\n    return tokenDetails.token;\n  }\n}\n\n/**\n * This method deletes the token from the database, unsubscribes the token from FCM, and unregisters\n * the push subscription if it exists.\n */\nexport async function deleteToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<boolean> {\n  const tokenDetails = await dbGet(firebaseDependencies);\n  if (tokenDetails) {\n    await requestDeleteToken(firebaseDependencies, tokenDetails.token);\n    await dbRemove(firebaseDependencies);\n  }\n\n  // Unsubscribe from the push subscription.\n  const pushSubscription = await swRegistration.pushManager.getSubscription();\n  if (pushSubscription) {\n    return pushSubscription.unsubscribe();\n  }\n\n  // If there's no SW, consider it a success.\n  return true;\n}\n\nasync function updateToken(\n  tokenDetails: TokenDetails,\n  firebaseDependencies: FirebaseInternalDependencies,\n  swRegistration: ServiceWorkerRegistration\n): Promise<string> {\n  try {\n    const updatedToken = await requestUpdateToken(\n      firebaseDependencies,\n      tokenDetails\n    );\n\n    const updatedTokenDetails: TokenDetails = {\n      ...tokenDetails,\n      token: updatedToken,\n      createTime: Date.now()\n    };\n\n    await dbSet(firebaseDependencies, updatedTokenDetails);\n    return updatedToken;\n  } catch (e) {\n    await deleteToken(firebaseDependencies, swRegistration);\n    throw e;\n  }\n}\n\nasync function getNewToken(\n  firebaseDependencies: FirebaseInternalDependencies,\n  subscriptionOptions: SubscriptionOptions\n): Promise<string> {\n  const token = await requestGetToken(\n    firebaseDependencies,\n    subscriptionOptions\n  );\n  const tokenDetails: TokenDetails = {\n    token,\n    createTime: Date.now(),\n    subscriptionOptions\n  };\n  await dbSet(firebaseDependencies, tokenDetails);\n  return tokenDetails.token;\n}\n\n/**\n * Gets a PushSubscription for the current user.\n */\nasync function getPushSubscription(\n  swRegistration: ServiceWorkerRegistration,\n  vapidKey: string\n): Promise<PushSubscription> {\n  const subscription = await swRegistration.pushManager.getSubscription();\n  if (subscription) {\n    return subscription;\n  }\n  return swRegistration.pushManager.subscribe({\n    userVisibleOnly: true,\n    // Chrome <= 75 doesn't support base64-encoded VAPID key. For backward compatibility, VAPID key\n    // submitted to pushManager#subscribe must be of type Uint8Array.\n    applicationServerKey: base64ToArray(vapidKey)\n  });\n}\n\n/**\n * Checks if the saved tokenDetails object matches the configuration provided.\n */\nfunction isTokenValid(\n  dbOptions: SubscriptionOptions,\n  currentOptions: SubscriptionOptions\n): boolean {\n  const isVapidKeyEqual = currentOptions.vapidKey === dbOptions.vapidKey;\n  const isEndpointEqual = currentOptions.endpoint === dbOptions.endpoint;\n  const isAuthEqual = currentOptions.auth === dbOptions.auth;\n  const isP256dhEqual = currentOptions.p256dh === dbOptions.p256dh;\n\n  return isVapidKeyEqual && isEndpointEqual && isAuthEqual && isP256dhEqual;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { CONSOLE_CAMPAIGN_ID } from '../util/constants';\nimport { ConsoleMessageData } from '../interfaces/internal-message-payload';\n\nexport function isConsoleMessage(data: unknown): data is ConsoleMessageData {\n  // This message has a campaign ID, meaning it was sent using the Firebase Console.\n  return typeof data === 'object' && !!data && CONSOLE_CAMPAIGN_ID in data;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/** Returns a promise that resolves after given time passes. */\nexport function sleep(ms: number): Promise<void> {\n  return new Promise<void>(resolve => {\n    setTimeout(resolve, ms);\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS,\n  DEFAULT_VAPID_KEY,\n  FCM_MSG,\n  FOREGROUND_HANDLE_PREPARATION_TIME_MS,\n  TAG\n} from '../util/constants';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseMessaging, MessagePayload } from '@firebase/messaging-types';\nimport {\n  MessagePayloadInternal,\n  MessageType,\n  NotificationPayloadInternal\n} from '../interfaces/internal-message-payload';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { deleteToken, getToken } from '../core/token-management';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { dbGet } from '../helpers/idb-manager';\nimport { externalizePayload } from '../helpers/externalizePayload';\nimport { isConsoleMessage } from '../helpers/is-console-message';\nimport { sleep } from '../helpers/sleep';\n\n// Let TS know that this is a service worker\ndeclare const self: ServiceWorkerGlobalScope;\n\nexport type BgMessageHandler = (payload: MessagePayload) => unknown;\n\nexport class SwController implements FirebaseMessaging, FirebaseService {\n  // A boolean flag to determine wether an app is using onBackgroundMessage or\n  // setBackgroundMessageHandler. onBackgroundMessage will receive a MessagePayload regardless of if\n  // a notification is displayed. Whereas, setBackgroundMessageHandler will swallow the\n  // MessagePayload if a NotificationPayload is included.\n  private isOnBackgroundMessageUsed: boolean | null = null;\n  private vapidKey: string | null = null;\n  private bgMessageHandler:\n    | null\n    | BgMessageHandler\n    | NextFn<MessagePayload>\n    | Observer<MessagePayload> = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    self.addEventListener('push', e => {\n      e.waitUntil(this.onPush(e));\n    });\n    self.addEventListener('pushsubscriptionchange', e => {\n      e.waitUntil(this.onSubChange(e));\n    });\n    self.addEventListener('notificationclick', e => {\n      e.waitUntil(this.onNotificationClick(e));\n    });\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  /**\n   * @deprecated. Use onBackgroundMessage(nextOrObserver: NextFn<object> | Observer<object>):\n   * Unsubscribe instead.\n   *\n   * Calling setBackgroundMessageHandler will opt in to some specific behaviors.\n   *\n   * 1.) If a notification doesn't need to be shown due to a window already being visible, then push\n   * messages will be sent to the page. 2.) If a notification needs to be shown, and the message\n   * contains no notification data this method will be called and the promise it returns will be\n   * passed to event.waitUntil. If you do not set this callback then all push messages will let and\n   * the developer can handle them in a their own 'push' event callback\n   *\n   * @param callback The callback to be called when a push message is received and a notification\n   * must be shown. The callback will be given the data from the push message.\n   */\n  setBackgroundMessageHandler(callback: BgMessageHandler): void {\n    this.isOnBackgroundMessageUsed = false;\n\n    if (!callback || typeof callback !== 'function') {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_BG_HANDLER);\n    }\n\n    this.bgMessageHandler = callback;\n  }\n\n  onBackgroundMessage(\n    nextOrObserver: NextFn<MessagePayload> | Observer<MessagePayload>\n  ): Unsubscribe {\n    this.isOnBackgroundMessageUsed = true;\n    this.bgMessageHandler = nextOrObserver;\n\n    return () => {\n      this.bgMessageHandler = null;\n    };\n  }\n\n  // TODO: Remove getToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  async getToken(): Promise<string> {\n    if (!this.vapidKey) {\n      // Call getToken using the current VAPID key if there already is a token. This is needed\n      // because usePublicVapidKey was not available in SW. It will be removed when vapidKey becomes\n      // a parameter of getToken, or when getToken is removed from SW.\n      const tokenDetails = await dbGet(this.firebaseDependencies);\n      this.vapidKey =\n        tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY;\n    }\n\n    return getToken(\n      this.firebaseDependencies,\n      self.registration,\n      this.vapidKey\n    );\n  }\n\n  // TODO: Remove deleteToken from SW Controller. Calling this from an old SW can cause all kinds of\n  // trouble.\n  deleteToken(): Promise<boolean> {\n    return deleteToken(this.firebaseDependencies, self.registration);\n  }\n\n  requestPermission(): Promise<void> {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  // TODO: Remove this together with getToken from SW Controller.\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  useServiceWorker(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  onTokenRefresh(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_WINDOW);\n  }\n\n  /**\n   * A handler for push events that shows notifications based on the content of the payload.\n   *\n   * The payload must be a JSON-encoded Object with a `notification` key. The value of the\n   * `notification` property will be used as the NotificationOptions object passed to\n   * showNotification. Additionally, the `title` property of the notification object will be used as\n   * the title.\n   *\n   * If there is no notification data in the payload then no notification will be shown.\n   */\n  async onPush(event: PushEvent): Promise<void> {\n    const internalPayload = getMessagePayloadInternal(event);\n    if (!internalPayload) {\n      console.debug(\n        TAG +\n          'failed to get parsed MessagePayload from the PushEvent. Skip handling the push.'\n      );\n      return;\n    }\n\n    // foreground handling: eventually passed to onMessage hook\n    const clientList = await getClientList();\n    if (hasVisibleClients(clientList)) {\n      return sendMessagePayloadInternalToWindows(clientList, internalPayload);\n    }\n\n    // background handling: display and pass to onBackgroundMessage hook\n    let isNotificationShown = false;\n    if (!!internalPayload.notification) {\n      await showNotification(wrapInternalPayload(internalPayload));\n      isNotificationShown = true;\n    }\n\n    // MessagePayload is only passed to `onBackgroundMessage`. Skip passing MessagePayload for\n    // the legacy `setBackgroundMessageHandler` to preserve the SDK behaviors.\n    if (\n      isNotificationShown === true &&\n      this.isOnBackgroundMessageUsed === false\n    ) {\n      return;\n    }\n\n    if (!!this.bgMessageHandler) {\n      const payload = externalizePayload(internalPayload);\n\n      if (typeof this.bgMessageHandler === 'function') {\n        this.bgMessageHandler(payload);\n      } else {\n        this.bgMessageHandler.next(payload);\n      }\n    }\n\n    // wait briefly to allow onBackgroundMessage to complete\n    await sleep(BACKGROUND_HANDLE_EXECUTION_TIME_LIMIT_MS);\n  }\n\n  async onSubChange(event: PushSubscriptionChangeEvent): Promise<void> {\n    const { newSubscription } = event;\n    if (!newSubscription) {\n      // Subscription revoked, delete token\n      await deleteToken(this.firebaseDependencies, self.registration);\n      return;\n    }\n\n    const tokenDetails = await dbGet(this.firebaseDependencies);\n    await deleteToken(this.firebaseDependencies, self.registration);\n    await getToken(\n      this.firebaseDependencies,\n      self.registration,\n      tokenDetails?.subscriptionOptions?.vapidKey ?? DEFAULT_VAPID_KEY\n    );\n  }\n\n  async onNotificationClick(event: NotificationEvent): Promise<void> {\n    const internalPayload: MessagePayloadInternal =\n      event.notification?.data?.[FCM_MSG];\n\n    if (!internalPayload) {\n      return;\n    } else if (event.action) {\n      // User clicked on an action button. This will allow developers to act on action button clicks\n      // by using a custom onNotificationClick listener that they define.\n      return;\n    }\n\n    // Prevent other listeners from receiving the event\n    event.stopImmediatePropagation();\n    event.notification.close();\n\n    // Note clicking on a notification with no link set will focus the Chrome's current tab.\n    const link = getLink(internalPayload);\n    if (!link) {\n      return;\n    }\n\n    // FM should only open/focus links from app's origin.\n    const url = new URL(link, self.location.href);\n    const originUrl = new URL(self.location.origin);\n\n    if (url.host !== originUrl.host) {\n      return;\n    }\n\n    let client = await getWindowClient(url);\n\n    if (!client) {\n      client = await self.clients.openWindow(link);\n\n      // Wait three seconds for the client to initialize and set up the message handler so that it\n      // can receive the message.\n      await sleep(FOREGROUND_HANDLE_PREPARATION_TIME_MS);\n    } else {\n      client = await client.focus();\n    }\n\n    if (!client) {\n      // Window Client will not be returned if it's for a third party origin.\n      return;\n    }\n\n    internalPayload.messageType = MessageType.NOTIFICATION_CLICKED;\n    internalPayload.isFirebaseMessaging = true;\n    return client.postMessage(internalPayload);\n  }\n}\n\nfunction wrapInternalPayload(\n  internalPayload: MessagePayloadInternal\n): NotificationPayloadInternal {\n  const wrappedInternalPayload: NotificationPayloadInternal = {\n    ...((internalPayload.notification as unknown) as NotificationPayloadInternal)\n  };\n\n  // Put the message payload under FCM_MSG name so we can identify the notification as being an FCM\n  // notification vs a notification from somewhere else (i.e. normal web push or developer generated\n  // notification).\n  wrappedInternalPayload.data = {\n    [FCM_MSG]: internalPayload\n  };\n\n  return wrappedInternalPayload;\n}\n\nfunction getMessagePayloadInternal({\n  data\n}: PushEvent): MessagePayloadInternal | null {\n  if (!data) {\n    return null;\n  }\n\n  try {\n    return data.json();\n  } catch (err) {\n    // Not JSON so not an FCM message.\n    return null;\n  }\n}\n\n/**\n * @param url The URL to look for when focusing a client.\n * @return Returns an existing window client or a newly opened WindowClient.\n */\nasync function getWindowClient(url: URL): Promise<WindowClient | null> {\n  const clientList = await getClientList();\n\n  for (const client of clientList) {\n    const clientUrl = new URL(client.url, self.location.href);\n\n    if (url.host === clientUrl.host) {\n      return client;\n    }\n  }\n\n  return null;\n}\n\n/**\n * @returns If there is currently a visible WindowClient, this method will resolve to true,\n * otherwise false.\n */\nfunction hasVisibleClients(clientList: WindowClient[]): boolean {\n  return clientList.some(\n    client =>\n      client.visibilityState === 'visible' &&\n      // Ignore chrome-extension clients as that matches the background pages of extensions, which\n      // are always considered visible for some reason.\n      !client.url.startsWith('chrome-extension://')\n  );\n}\n\nfunction sendMessagePayloadInternalToWindows(\n  clientList: WindowClient[],\n  internalPayload: MessagePayloadInternal\n): void {\n  internalPayload.isFirebaseMessaging = true;\n  internalPayload.messageType = MessageType.PUSH_RECEIVED;\n\n  for (const client of clientList) {\n    client.postMessage(internalPayload);\n  }\n}\n\nfunction getClientList(): Promise<WindowClient[]> {\n  return self.clients.matchAll({\n    type: 'window',\n    includeUncontrolled: true\n    // TS doesn't know that \"type: 'window'\" means it'll return WindowClient[]\n  }) as Promise<WindowClient[]>;\n}\n\nfunction showNotification(\n  notificationPayloadInternal: NotificationPayloadInternal\n): Promise<void> {\n  // Note: Firefox does not support the maxActions property.\n  // https://developer.mozilla.org/en-US/docs/Web/API/notification/maxActions\n  const { actions } = notificationPayloadInternal;\n  const { maxActions } = Notification;\n  if (actions && maxActions && actions.length > maxActions) {\n    console.warn(\n      `This browser only supports ${maxActions} actions. The remaining actions will not be displayed.`\n    );\n  }\n\n  return self.registration.showNotification(\n    /* title= */ notificationPayloadInternal.title ?? '',\n    notificationPayloadInternal\n  );\n}\n\nfunction getLink(payload: MessagePayloadInternal): string | null {\n  // eslint-disable-next-line camelcase\n  const link = payload.fcmOptions?.link ?? payload.notification?.click_action;\n  if (link) {\n    return link;\n  }\n\n  if (isConsoleMessage(payload.data)) {\n    // Notification created in the Firebase Console. Redirect to origin.\n    return self.location.origin;\n  } else {\n    return null;\n  }\n}\n","/**\n * @license\n * Copyright 2020 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { MessagePayload } from '@firebase/messaging-types';\nimport { MessagePayloadInternal } from '../interfaces/internal-message-payload';\n\nexport function externalizePayload(\n  internalPayload: MessagePayloadInternal\n): MessagePayload {\n  const payload: MessagePayload = {\n    from: internalPayload.from,\n    // eslint-disable-next-line camelcase\n    collapseKey: internalPayload.collapse_key\n  } as MessagePayload;\n\n  propagateNotificationPayload(payload, internalPayload);\n  propagateDataPayload(payload, internalPayload);\n  propagateFcmOptions(payload, internalPayload);\n\n  return payload;\n}\n\nfunction propagateNotificationPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.notification) {\n    return;\n  }\n\n  payload.notification = {};\n\n  const title = messagePayloadInternal.notification!.title;\n  if (!!title) {\n    payload.notification!.title = title;\n  }\n\n  const body = messagePayloadInternal.notification!.body;\n  if (!!body) {\n    payload.notification!.body = body;\n  }\n\n  const image = messagePayloadInternal.notification!.image;\n  if (!!image) {\n    payload.notification!.image = image;\n  }\n}\n\nfunction propagateDataPayload(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.data) {\n    return;\n  }\n\n  payload.data = messagePayloadInternal.data as { [key: string]: string };\n}\n\nfunction propagateFcmOptions(\n  payload: MessagePayload,\n  messagePayloadInternal: MessagePayloadInternal\n): void {\n  if (!messagePayloadInternal.fcmOptions) {\n    return;\n  }\n\n  payload.fcmOptions = {};\n\n  const link = messagePayloadInternal.fcmOptions!.link;\n  if (!!link) {\n    payload.fcmOptions!.link = link;\n  }\n\n  // eslint-disable-next-line camelcase\n  const analyticsLabel = messagePayloadInternal.fcmOptions!.analytics_label;\n  if (!!analyticsLabel) {\n    payload.fcmOptions!.analyticsLabel = analyticsLabel;\n  }\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONSOLE_CAMPAIGN_ANALYTICS_ENABLED,\n  CONSOLE_CAMPAIGN_ID,\n  CONSOLE_CAMPAIGN_NAME,\n  CONSOLE_CAMPAIGN_TIME,\n  DEFAULT_SW_PATH,\n  DEFAULT_SW_SCOPE,\n  DEFAULT_VAPID_KEY\n} from '../util/constants';\nimport {\n  ConsoleMessageData,\n  MessagePayloadInternal,\n  MessageType\n} from '../interfaces/internal-message-payload';\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { NextFn, Observer, Unsubscribe } from '@firebase/util';\nimport { deleteToken, getToken } from '../core/token-management';\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebaseInternalDependencies } from '../interfaces/internal-dependencies';\nimport { FirebaseMessaging } from '@firebase/messaging-types';\nimport { FirebaseService } from '@firebase/app-types/private';\nimport { isConsoleMessage } from '../helpers/is-console-message';\n\nexport class WindowController implements FirebaseMessaging, FirebaseService {\n  private vapidKey: string | null = null;\n  private swRegistration?: ServiceWorkerRegistration;\n  private onMessageCallback: NextFn<object> | Observer<object> | null = null;\n\n  constructor(\n    private readonly firebaseDependencies: FirebaseInternalDependencies\n  ) {\n    navigator.serviceWorker.addEventListener('message', e =>\n      this.messageEventListener(e)\n    );\n  }\n\n  get app(): FirebaseApp {\n    return this.firebaseDependencies.app;\n  }\n\n  private async messageEventListener(event: MessageEvent): Promise<void> {\n    const internalPayload = event.data as MessagePayloadInternal;\n\n    if (!internalPayload.isFirebaseMessaging) {\n      return;\n    }\n\n    // onMessageCallback is either a function or observer/subscriber.\n    // TODO: in the modularization release, have onMessage handle type MessagePayload as supposed to\n    // the legacy payload where some fields are in snake cases.\n    if (\n      this.onMessageCallback &&\n      internalPayload.messageType === MessageType.PUSH_RECEIVED\n    ) {\n      if (typeof this.onMessageCallback === 'function') {\n        this.onMessageCallback(\n          stripInternalFields(Object.assign({}, internalPayload))\n        );\n      } else {\n        this.onMessageCallback.next(Object.assign({}, internalPayload));\n      }\n    }\n\n    const dataPayload = internalPayload.data;\n\n    if (\n      isConsoleMessage(dataPayload) &&\n      dataPayload[CONSOLE_CAMPAIGN_ANALYTICS_ENABLED] === '1'\n    ) {\n      await this.logEvent(internalPayload.messageType!, dataPayload);\n    }\n  }\n\n  getVapidKey(): string | null {\n    return this.vapidKey;\n  }\n\n  getSwReg(): ServiceWorkerRegistration | undefined {\n    return this.swRegistration;\n  }\n\n  async getToken(options?: {\n    vapidKey?: string;\n    serviceWorkerRegistration?: ServiceWorkerRegistration;\n  }): Promise<string> {\n    if (Notification.permission === 'default') {\n      await Notification.requestPermission();\n    }\n\n    if (Notification.permission !== 'granted') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    }\n\n    await this.updateVapidKey(options?.vapidKey);\n    await this.updateSwReg(options?.serviceWorkerRegistration);\n\n    return getToken(\n      this.firebaseDependencies,\n      this.swRegistration!,\n      this.vapidKey!\n    );\n  }\n\n  async updateVapidKey(vapidKey?: string | undefined): Promise<void> {\n    if (!!vapidKey) {\n      this.vapidKey = vapidKey;\n    } else if (!this.vapidKey) {\n      this.vapidKey = DEFAULT_VAPID_KEY;\n    }\n  }\n\n  async updateSwReg(\n    swRegistration?: ServiceWorkerRegistration | undefined\n  ): Promise<void> {\n    if (!swRegistration && !this.swRegistration) {\n      await this.registerDefaultSw();\n    }\n\n    if (!swRegistration && !!this.swRegistration) {\n      return;\n    }\n\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  private async registerDefaultSw(): Promise<void> {\n    try {\n      this.swRegistration = await navigator.serviceWorker.register(\n        DEFAULT_SW_PATH,\n        {\n          scope: DEFAULT_SW_SCOPE\n        }\n      );\n\n      // The timing when browser updates sw when sw has an update is unreliable by my experiment. It\n      // leads to version conflict when the SDK upgrades to a newer version in the main page, but sw\n      // is stuck with the old version. For example,\n      // https://github.com/firebase/firebase-js-sdk/issues/2590 The following line reliably updates\n      // sw if there was an update.\n      this.swRegistration.update().catch(() => {\n        /* it is non blocking and we don't care if it failed */\n      });\n    } catch (e) {\n      throw ERROR_FACTORY.create(ErrorCode.FAILED_DEFAULT_REGISTRATION, {\n        browserErrorMessage: e.message\n      });\n    }\n  }\n\n  async deleteToken(): Promise<boolean> {\n    if (!this.swRegistration) {\n      await this.registerDefaultSw();\n    }\n\n    return deleteToken(this.firebaseDependencies, this.swRegistration!);\n  }\n\n  /**\n   * Request permission if it is not currently granted.\n   *\n   * @return Resolves if the permission was granted, rejects otherwise.\n   *\n   * @deprecated Use Notification.requestPermission() instead.\n   * https://developer.mozilla.org/en-US/docs/Web/API/Notification/requestPermission\n   */\n  async requestPermission(): Promise<void> {\n    if (Notification.permission === 'granted') {\n      return;\n    }\n\n    const permissionResult = await Notification.requestPermission();\n    if (permissionResult === 'granted') {\n      return;\n    } else if (permissionResult === 'denied') {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_BLOCKED);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.PERMISSION_DEFAULT);\n    }\n  }\n\n  /**\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\n   * ServiceWorkerRegistration;}): Promise<string> instead.\n   */\n  usePublicVapidKey(vapidKey: string): void {\n    if (this.vapidKey !== null) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_VAPID_KEY_AFTER_GET_TOKEN);\n    }\n\n    if (typeof vapidKey !== 'string' || vapidKey.length === 0) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_VAPID_KEY);\n    }\n\n    this.vapidKey = vapidKey;\n  }\n\n  /**\n   * @deprecated. Use getToken(options?: {vapidKey?: string; serviceWorkerRegistration?:\n   * ServiceWorkerRegistration;}): Promise<string> instead.\n   */\n  useServiceWorker(swRegistration: ServiceWorkerRegistration): void {\n    if (!(swRegistration instanceof ServiceWorkerRegistration)) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_SW_REGISTRATION);\n    }\n\n    if (this.swRegistration) {\n      throw ERROR_FACTORY.create(ErrorCode.USE_SW_AFTER_GET_TOKEN);\n    }\n\n    this.swRegistration = swRegistration;\n  }\n\n  /**\n   * @param nextOrObserver An observer object or a function triggered on message.\n   *\n   * @return The unsubscribe function for the observer.\n   */\n  onMessage(nextOrObserver: NextFn<object> | Observer<object>): Unsubscribe {\n    this.onMessageCallback = nextOrObserver;\n\n    return () => {\n      this.onMessageCallback = null;\n    };\n  }\n\n  setBackgroundMessageHandler(): void {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  onBackgroundMessage(): Unsubscribe {\n    throw ERROR_FACTORY.create(ErrorCode.AVAILABLE_IN_SW);\n  }\n\n  /**\n   * @deprecated No-op. It was initially designed with token rotation requests from server in mind.\n   * However, the plan to implement such feature was abandoned.\n   */\n  onTokenRefresh(): Unsubscribe {\n    return () => {};\n  }\n\n  private async logEvent(\n    messageType: MessageType,\n    data: ConsoleMessageData\n  ): Promise<void> {\n    const eventType = getEventType(messageType);\n    const analytics = await this.firebaseDependencies.analyticsProvider.get();\n    analytics.logEvent(eventType, {\n      /* eslint-disable camelcase */\n      message_id: data[CONSOLE_CAMPAIGN_ID],\n      message_name: data[CONSOLE_CAMPAIGN_NAME],\n      message_time: data[CONSOLE_CAMPAIGN_TIME],\n      message_device_time: Math.floor(Date.now() / 1000)\n      /* eslint-enable camelcase */\n    });\n  }\n}\n\nfunction getEventType(messageType: MessageType): string {\n  switch (messageType) {\n    case MessageType.NOTIFICATION_CLICKED:\n      return 'notification_open';\n    case MessageType.PUSH_RECEIVED:\n      return 'notification_foreground';\n    default:\n      throw new Error();\n  }\n}\n\nfunction stripInternalFields(\n  internalPayload: MessagePayloadInternal\n): MessagePayloadInternal {\n  delete internalPayload.messageType;\n  delete internalPayload.isFirebaseMessaging;\n  return internalPayload;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../util/errors';\nimport { FirebaseApp, FirebaseOptions } from '@firebase/app-types';\n\nimport { AppConfig } from '../interfaces/app-config';\nimport { FirebaseError } from '@firebase/util';\n\nexport function extractAppConfig(app: FirebaseApp): AppConfig {\n  if (!app || !app.options) {\n    throw getMissingValueError('App Configuration Object');\n  }\n\n  if (!app.name) {\n    throw getMissingValueError('App Name');\n  }\n\n  // Required app config keys\n  const configKeys: ReadonlyArray<keyof FirebaseOptions> = [\n    'projectId',\n    'apiKey',\n    'appId',\n    'messagingSenderId'\n  ];\n\n  const { options } = app;\n  for (const keyName of configKeys) {\n    if (!options[keyName]) {\n      throw getMissingValueError(keyName);\n    }\n  }\n\n  return {\n    appName: app.name,\n    projectId: options.projectId!,\n    apiKey: options.apiKey!,\n    appId: options.appId!,\n    senderId: options.messagingSenderId!\n  };\n}\n\nfunction getMissingValueError(valueName: string): FirebaseError {\n  return ERROR_FACTORY.create(ErrorCode.MISSING_APP_CONFIG_VALUES, {\n    valueName\n  });\n}\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nconsole.warn(`\nIt looks like you're using the development build of the Firebase JS SDK.\nWhen deploying Firebase apps to production, it is advisable to only import\nthe individual SDK components you intend to use.\n\nFor the module builds, these are available in the following manner\n(replace <PACKAGE> with the name of a component - i.e. auth, database, etc):\n\nCommonJS Modules:\nconst firebase = require('firebase/app');\nrequire('firebase/<PACKAGE>');\n\nES Modules:\nimport firebase from 'firebase/app';\nimport 'firebase/<PACKAGE>';\n\nTypescript:\nimport firebase from 'firebase/app';\nimport 'firebase/<PACKAGE>';\n`);\n\nimport firebase from '../app';\nimport { name, version } from '../package.json';\n\nimport '../auth';\nimport '../database';\nimport '../firestore';\nimport '../functions';\nimport '../messaging';\nimport '../storage';\nimport '../performance';\nimport '../analytics';\nimport '../remote-config';\n\nfirebase.registerVersion(name, version);\n\nexport default firebase;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { isIndexedDBAvailable } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\ndeclare global {\n  interface Window {\n    PerformanceObserver: typeof PerformanceObserver;\n    // eslint-disable-next-line @typescript-eslint/ban-types\n    perfMetrics?: { onFirstInputDelay: Function };\n  }\n}\n\nlet apiInstance: Api | undefined;\nlet windowInstance: Window | undefined;\n\nexport type EntryType =\n  | 'mark'\n  | 'measure'\n  | 'paint'\n  | 'resource'\n  | 'frame'\n  | 'navigation';\n\n/**\n * This class holds a reference to various browser related objects injected by\n * set methods.\n */\nexport class Api {\n  private readonly performance: Performance;\n  /** PreformanceObserver constructor function. */\n  private readonly PerformanceObserver: typeof PerformanceObserver;\n  private readonly windowLocation: Location;\n  // eslint-disable-next-line @typescript-eslint/ban-types\n  readonly onFirstInputDelay?: Function;\n  readonly localStorage?: Storage;\n  readonly document: Document;\n  readonly navigator: Navigator;\n\n  constructor(readonly window?: Window) {\n    if (!window) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_WINDOW);\n    }\n    this.performance = window.performance;\n    this.PerformanceObserver = window.PerformanceObserver;\n    this.windowLocation = window.location;\n    this.navigator = window.navigator;\n    this.document = window.document;\n    if (this.navigator && this.navigator.cookieEnabled) {\n      // If user blocks cookies on the browser, accessing localStorage will\n      // throw an exception.\n      this.localStorage = window.localStorage;\n    }\n    if (window.perfMetrics && window.perfMetrics.onFirstInputDelay) {\n      this.onFirstInputDelay = window.perfMetrics.onFirstInputDelay;\n    }\n  }\n\n  getUrl(): string {\n    // Do not capture the string query part of url.\n    return this.windowLocation.href.split('?')[0];\n  }\n\n  mark(name: string): void {\n    if (!this.performance || !this.performance.mark) {\n      return;\n    }\n    this.performance.mark(name);\n  }\n\n  measure(measureName: string, mark1: string, mark2: string): void {\n    if (!this.performance || !this.performance.measure) {\n      return;\n    }\n    this.performance.measure(measureName, mark1, mark2);\n  }\n\n  getEntriesByType(type: EntryType): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByType) {\n      return [];\n    }\n    return this.performance.getEntriesByType(type);\n  }\n\n  getEntriesByName(name: string): PerformanceEntry[] {\n    if (!this.performance || !this.performance.getEntriesByName) {\n      return [];\n    }\n    return this.performance.getEntriesByName(name);\n  }\n\n  getTimeOrigin(): number {\n    // Polyfill the time origin with performance.timing.navigationStart.\n    return (\n      this.performance &&\n      (this.performance.timeOrigin || this.performance.timing.navigationStart)\n    );\n  }\n\n  requiredApisAvailable(): boolean {\n    if (\n      !fetch ||\n      !Promise ||\n      !this.navigator ||\n      !this.navigator.cookieEnabled\n    ) {\n      consoleLogger.info(\n        'Firebase Performance cannot start if browser does not support fetch and Promise or cookie is disabled.'\n      );\n      return false;\n    }\n\n    if (!isIndexedDBAvailable()) {\n      consoleLogger.info('IndexedDB is not supported by current browswer');\n      return false;\n    }\n    return true;\n  }\n\n  setupObserver(\n    entryType: EntryType,\n    callback: (entry: PerformanceEntry) => void\n  ): void {\n    if (!this.PerformanceObserver) {\n      return;\n    }\n    const observer = new this.PerformanceObserver(list => {\n      for (const entry of list.getEntries()) {\n        // `entry` is a PerformanceEntry instance.\n        callback(entry);\n      }\n    });\n\n    // Start observing the entry types you care about.\n    observer.observe({ entryTypes: [entryType] });\n  }\n\n  static getInstance(): Api {\n    if (apiInstance === undefined) {\n      apiInstance = new Api(windowInstance);\n    }\n    return apiInstance;\n  }\n}\n\nexport function setupApi(window: Window): void {\n  windowInstance = window;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory } from '@firebase/util';\nimport { SERVICE, SERVICE_NAME } from '../constants';\n\nexport const enum ErrorCode {\n  TRACE_STARTED_BEFORE = 'trace started',\n  TRACE_STOPPED_BEFORE = 'trace stopped',\n  NONPOSITIVE_TRACE_START_TIME = 'nonpositive trace startTime',\n  NONPOSITIVE_TRACE_DURATION = 'nonpositive trace duration',\n  NO_WINDOW = 'no window',\n  NO_APP_ID = 'no app id',\n  NO_PROJECT_ID = 'no project id',\n  NO_API_KEY = 'no api key',\n  INVALID_CC_LOG = 'invalid cc log',\n  FB_NOT_DEFAULT = 'FB not default',\n  RC_NOT_OK = 'RC response not ok',\n  INVALID_ATTRIBUTE_NAME = 'invalid attribute name',\n  INVALID_ATTRIBUTE_VALUE = 'invalid attribute value',\n  INVALID_CUSTOM_METRIC_NAME = 'invalid custom metric name',\n  INVALID_STRING_MERGER_PARAMETER = 'invalid String merger input'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.TRACE_STARTED_BEFORE]: 'Trace {$traceName} was started before.',\n  [ErrorCode.TRACE_STOPPED_BEFORE]: 'Trace {$traceName} is not running.',\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]:\n    'Trace {$traceName} startTime should be positive.',\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]:\n    'Trace {$traceName} duration should be positive.',\n  [ErrorCode.NO_WINDOW]: 'Window is not available.',\n  [ErrorCode.NO_APP_ID]: 'App id is not available.',\n  [ErrorCode.NO_PROJECT_ID]: 'Project id is not available.',\n  [ErrorCode.NO_API_KEY]: 'Api key is not available.',\n  [ErrorCode.INVALID_CC_LOG]: 'Attempted to queue invalid cc event',\n  [ErrorCode.FB_NOT_DEFAULT]:\n    'Performance can only start when Firebase app instance is the default one.',\n  [ErrorCode.RC_NOT_OK]: 'RC response is not ok',\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]:\n    'Attribute name {$attributeName} is invalid.',\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]:\n    'Attribute value {$attributeValue} is invalid.',\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]:\n    'Custom metric name {$customMetricName} is invalid',\n  [ErrorCode.INVALID_STRING_MERGER_PARAMETER]:\n    'Input for String merger is invalid, contact support team to resolve.'\n};\n\ninterface ErrorParams {\n  [ErrorCode.TRACE_STARTED_BEFORE]: { traceName: string };\n  [ErrorCode.TRACE_STOPPED_BEFORE]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_START_TIME]: { traceName: string };\n  [ErrorCode.NONPOSITIVE_TRACE_DURATION]: { traceName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_NAME]: { attributeName: string };\n  [ErrorCode.INVALID_ATTRIBUTE_VALUE]: { attributeValue: string };\n  [ErrorCode.INVALID_CUSTOM_METRIC_NAME]: { customMetricName: string };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  SERVICE,\n  SERVICE_NAME,\n  ERROR_DESCRIPTION_MAP\n);\n","/**\n * @license\n * Copyright 2017 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { version } from '../package.json';\n\nexport const SDK_VERSION = version;\n/** The prefix for start User Timing marks used for creating Traces. */\nexport const TRACE_START_MARK_PREFIX = 'FB-PERF-TRACE-START';\n/** The prefix for stop User Timing marks used for creating Traces. */\nexport const TRACE_STOP_MARK_PREFIX = 'FB-PERF-TRACE-STOP';\n/** The prefix for User Timing measure used for creating Traces. */\nexport const TRACE_MEASURE_PREFIX = 'FB-PERF-TRACE-MEASURE';\n/** The prefix for out of the box page load Trace name. */\nexport const OOB_TRACE_PAGE_LOAD_PREFIX = '_wt_';\n\nexport const FIRST_PAINT_COUNTER_NAME = '_fp';\n\nexport const FIRST_CONTENTFUL_PAINT_COUNTER_NAME = '_fcp';\n\nexport const FIRST_INPUT_DELAY_COUNTER_NAME = '_fid';\n\nexport const CONFIG_LOCAL_STORAGE_KEY = '@firebase/performance/config';\n\nexport const CONFIG_EXPIRY_LOCAL_STORAGE_KEY =\n  '@firebase/performance/configexpire';\n\nexport const SERVICE = 'performance';\nexport const SERVICE_NAME = 'Performance';\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Logger, LogLevel } from '@firebase/logger';\nimport { SERVICE_NAME } from '../constants';\n\nexport const consoleLogger = new Logger(SERVICE_NAME);\nconsoleLogger.logLevel = LogLevel.INFO;\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport { mergeStrings } from '../utils/string_merger';\n\nlet settingsServiceInstance: SettingsService | undefined;\n\nexport class SettingsService {\n  // The variable which controls logging of automatic traces and HTTP/S network monitoring.\n  instrumentationEnabled = true;\n\n  // The variable which controls logging of custom traces.\n  dataCollectionEnabled = true;\n\n  // Configuration flags set through remote config.\n  loggingEnabled = false;\n  // Sampling rate between 0 and 1.\n  tracesSamplingRate = 1;\n  networkRequestsSamplingRate = 1;\n\n  // Address of logging service.\n  logEndPointUrl =\n    'https://firebaselogging.googleapis.com/v0cc/log?format=json_proto';\n  // Performance event transport endpoint URL which should be compatible with proto3.\n  // New Address for transport service, not configurable via Remote Config.\n  flTransportEndpointUrl = mergeStrings(\n    'hts/frbslgigp.ogepscmv/ieo/eaylg',\n    'tp:/ieaeogn-agolai.o/1frlglgc/o'\n  );\n\n  transportKey = mergeStrings('AzSC8r6ReiGqFMyfvgow', 'Iayx0u-XT3vksVM-pIV');\n\n  // Source type for performance event logs.\n  logSource = 462;\n\n  // Flags which control per session logging of traces and network requests.\n  logTraceAfterSampling = false;\n  logNetworkAfterSampling = false;\n\n  // TTL of config retrieved from remote config in hours.\n  configTimeToLive = 12;\n\n  firebaseAppInstance!: FirebaseApp;\n\n  installationsService!: FirebaseInstallations;\n\n  getAppId(): string {\n    const appId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.appId;\n    if (!appId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_APP_ID);\n    }\n    return appId;\n  }\n\n  getProjectId(): string {\n    const projectId =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.projectId;\n    if (!projectId) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_PROJECT_ID);\n    }\n    return projectId;\n  }\n\n  getApiKey(): string {\n    const apiKey =\n      this.firebaseAppInstance &&\n      this.firebaseAppInstance.options &&\n      this.firebaseAppInstance.options.apiKey;\n    if (!apiKey) {\n      throw ERROR_FACTORY.create(ErrorCode.NO_API_KEY);\n    }\n    return apiKey;\n  }\n\n  getFlTransportFullUrl(): string {\n    return this.flTransportEndpointUrl.concat('?key=', this.transportKey);\n  }\n\n  static getInstance(): SettingsService {\n    if (settingsServiceInstance === undefined) {\n      settingsServiceInstance = new SettingsService();\n    }\n    return settingsServiceInstance;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ERROR_FACTORY, ErrorCode } from './errors';\n\nexport function mergeStrings(part1: string, part2: string): string {\n  const sizeDiff = part1.length - part2.length;\n  if (sizeDiff < 0 || sizeDiff > 1) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_STRING_MERGER_PARAMETER);\n  }\n\n  const resultArray = [];\n  for (let i = 0; i < part1.length; i++) {\n    resultArray.push(part1.charAt(i));\n    if (part2.length > i) {\n      resultArray.push(part2.charAt(i));\n    }\n  }\n\n  return resultArray.join('');\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { SettingsService } from './settings_service';\n\nlet iid: string | undefined;\nlet authToken: string | undefined;\n\nexport function getIidPromise(): Promise<string> {\n  const iidPromise = SettingsService.getInstance().installationsService.getId();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  iidPromise.then((iidVal: string) => {\n    iid = iidVal;\n  });\n  return iidPromise;\n}\n\n// This method should be used after the iid is retrieved by getIidPromise method.\nexport function getIid(): string | undefined {\n  return iid;\n}\n\nexport function getAuthTokenPromise(): Promise<string> {\n  const authTokenPromise = SettingsService.getInstance().installationsService.getToken();\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  authTokenPromise.then((authTokenVal: string) => {\n    authToken = authTokenVal;\n  });\n  return authTokenPromise;\n}\n\nexport function getAuthenticationToken(): string | undefined {\n  return authToken;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\n\n// The values and orders of the following enums should not be changed.\nconst enum ServiceWorkerStatus {\n  UNKNOWN = 0,\n  UNSUPPORTED = 1,\n  CONTROLLED = 2,\n  UNCONTROLLED = 3\n}\n\nexport enum VisibilityState {\n  UNKNOWN = 0,\n  VISIBLE = 1,\n  HIDDEN = 2\n}\n\nconst enum EffectiveConnectionType {\n  UNKNOWN = 0,\n  CONNECTION_SLOW_2G = 1,\n  CONNECTION_2G = 2,\n  CONNECTION_3G = 3,\n  CONNECTION_4G = 4\n}\n\n/**\n * NetworkInformation\n *\n * ref: https://developer.mozilla.org/en-US/docs/Web/API/NetworkInformation\n */\ninterface NetworkInformation {\n  readonly effectiveType?: 'slow-2g' | '2g' | '3g' | '4g';\n}\n\ninterface NavigatorWithConnection extends Navigator {\n  readonly connection: NetworkInformation;\n}\n\nconst RESERVED_ATTRIBUTE_PREFIXES = ['firebase_', 'google_', 'ga_'];\nconst ATTRIBUTE_FORMAT_REGEX = new RegExp('^[a-zA-Z]\\\\w*$');\nconst MAX_ATTRIBUTE_NAME_LENGTH = 40;\nconst MAX_ATTRIBUTE_VALUE_LENGTH = 100;\n\nexport function getServiceWorkerStatus(): ServiceWorkerStatus {\n  const navigator = Api.getInstance().navigator;\n  if ('serviceWorker' in navigator) {\n    if (navigator.serviceWorker.controller) {\n      return ServiceWorkerStatus.CONTROLLED;\n    } else {\n      return ServiceWorkerStatus.UNCONTROLLED;\n    }\n  } else {\n    return ServiceWorkerStatus.UNSUPPORTED;\n  }\n}\n\nexport function getVisibilityState(): VisibilityState {\n  const document = Api.getInstance().document;\n  const visibilityState = document.visibilityState;\n  switch (visibilityState) {\n    case 'visible':\n      return VisibilityState.VISIBLE;\n    case 'hidden':\n      return VisibilityState.HIDDEN;\n    default:\n      return VisibilityState.UNKNOWN;\n  }\n}\n\nexport function getEffectiveConnectionType(): EffectiveConnectionType {\n  const navigator = Api.getInstance().navigator;\n  const navigatorConnection = (navigator as NavigatorWithConnection).connection;\n  const effectiveType =\n    navigatorConnection && navigatorConnection.effectiveType;\n  switch (effectiveType) {\n    case 'slow-2g':\n      return EffectiveConnectionType.CONNECTION_SLOW_2G;\n    case '2g':\n      return EffectiveConnectionType.CONNECTION_2G;\n    case '3g':\n      return EffectiveConnectionType.CONNECTION_3G;\n    case '4g':\n      return EffectiveConnectionType.CONNECTION_4G;\n    default:\n      return EffectiveConnectionType.UNKNOWN;\n  }\n}\n\nexport function isValidCustomAttributeName(name: string): boolean {\n  if (name.length === 0 || name.length > MAX_ATTRIBUTE_NAME_LENGTH) {\n    return false;\n  }\n  const matchesReservedPrefix = RESERVED_ATTRIBUTE_PREFIXES.some(prefix =>\n    name.startsWith(prefix)\n  );\n  return !matchesReservedPrefix && !!name.match(ATTRIBUTE_FORMAT_REGEX);\n}\n\nexport function isValidCustomAttributeValue(value: string): boolean {\n  return value.length !== 0 && value.length <= MAX_ATTRIBUTE_VALUE_LENGTH;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n  CONFIG_LOCAL_STORAGE_KEY,\n  SDK_VERSION\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\n\nimport { Api } from './api_service';\nimport { getAuthTokenPromise } from './iid_service';\nimport { SettingsService } from './settings_service';\n\nconst REMOTE_CONFIG_SDK_VERSION = '0.0.1';\n\ninterface SecondaryConfig {\n  loggingEnabled?: boolean;\n  logSource?: number;\n  logEndPointUrl?: string;\n  transportKey?: string;\n  tracesSamplingRate?: number;\n  networkRequestsSamplingRate?: number;\n}\n\n// These values will be used if the remote config object is successfully\n// retrieved, but the template does not have these fields.\nconst DEFAULT_CONFIGS: SecondaryConfig = {\n  loggingEnabled: true\n};\n\n/* eslint-disable camelcase */\ninterface RemoteConfigTemplate {\n  fpr_enabled?: string;\n  fpr_log_source?: string;\n  fpr_log_endpoint_url?: string;\n  fpr_log_transport_key?: string;\n  fpr_log_transport_web_percent?: string;\n  fpr_vc_network_request_sampling_rate?: string;\n  fpr_vc_trace_sampling_rate?: string;\n  fpr_vc_session_sampling_rate?: string;\n}\n/* eslint-enable camelcase */\n\ninterface RemoteConfigResponse {\n  entries?: RemoteConfigTemplate;\n  state?: string;\n}\n\nconst FIS_AUTH_PREFIX = 'FIREBASE_INSTALLATIONS_AUTH';\n\nexport function getConfig(iid: string): Promise<void> {\n  const config = getStoredConfig();\n  if (config) {\n    processConfig(config);\n    return Promise.resolve();\n  }\n\n  return getRemoteConfig(iid)\n    .then(processConfig)\n    .then(\n      config => storeConfig(config),\n      /** Do nothing for error, use defaults set in settings service. */\n      () => {}\n    );\n}\n\nfunction getStoredConfig(): RemoteConfigResponse | undefined {\n  const localStorage = Api.getInstance().localStorage;\n  if (!localStorage) {\n    return;\n  }\n  const expiryString = localStorage.getItem(CONFIG_EXPIRY_LOCAL_STORAGE_KEY);\n  if (!expiryString || !configValid(expiryString)) {\n    return;\n  }\n\n  const configStringified = localStorage.getItem(CONFIG_LOCAL_STORAGE_KEY);\n  if (!configStringified) {\n    return;\n  }\n  try {\n    const configResponse: RemoteConfigResponse = JSON.parse(configStringified);\n    return configResponse;\n  } catch {\n    return;\n  }\n}\n\nfunction storeConfig(config: RemoteConfigResponse | undefined): void {\n  const localStorage = Api.getInstance().localStorage;\n  if (!config || !localStorage) {\n    return;\n  }\n\n  localStorage.setItem(CONFIG_LOCAL_STORAGE_KEY, JSON.stringify(config));\n  localStorage.setItem(\n    CONFIG_EXPIRY_LOCAL_STORAGE_KEY,\n    String(\n      Date.now() +\n        SettingsService.getInstance().configTimeToLive * 60 * 60 * 1000\n    )\n  );\n}\n\nconst COULD_NOT_GET_CONFIG_MSG =\n  'Could not fetch config, will use default configs';\n\nfunction getRemoteConfig(\n  iid: string\n): Promise<RemoteConfigResponse | undefined> {\n  // Perf needs auth token only to retrieve remote config.\n  return getAuthTokenPromise()\n    .then(authToken => {\n      const projectId = SettingsService.getInstance().getProjectId();\n      const configEndPoint = `https://firebaseremoteconfig.googleapis.com/v1/projects/${projectId}/namespaces/fireperf:fetch?key=${SettingsService.getInstance().getApiKey()}`;\n      const request = new Request(configEndPoint, {\n        method: 'POST',\n        headers: { Authorization: `${FIS_AUTH_PREFIX} ${authToken}` },\n        /* eslint-disable camelcase */\n        body: JSON.stringify({\n          app_instance_id: iid,\n          app_instance_id_token: authToken,\n          app_id: SettingsService.getInstance().getAppId(),\n          app_version: SDK_VERSION,\n          sdk_version: REMOTE_CONFIG_SDK_VERSION\n        })\n        /* eslint-enable camelcase */\n      });\n      return fetch(request).then(response => {\n        if (response.ok) {\n          return response.json() as RemoteConfigResponse;\n        }\n        // In case response is not ok. This will be caught by catch.\n        throw ERROR_FACTORY.create(ErrorCode.RC_NOT_OK);\n      });\n    })\n    .catch(() => {\n      consoleLogger.info(COULD_NOT_GET_CONFIG_MSG);\n      return undefined;\n    });\n}\n\n/**\n * Processes config coming either from calling RC or from local storage.\n * This method only runs if call is successful or config in storage\n * is valid.\n */\nfunction processConfig(\n  config?: RemoteConfigResponse\n): RemoteConfigResponse | undefined {\n  if (!config) {\n    return config;\n  }\n  const settingsServiceInstance = SettingsService.getInstance();\n  const entries = config.entries || {};\n  if (entries.fpr_enabled !== undefined) {\n    // TODO: Change the assignment of loggingEnabled once the received type is\n    // known.\n    settingsServiceInstance.loggingEnabled =\n      String(entries.fpr_enabled) === 'true';\n  } else if (DEFAULT_CONFIGS.loggingEnabled !== undefined) {\n    // Config retrieved successfully, but there is no fpr_enabled in template.\n    // Use secondary configs value.\n    settingsServiceInstance.loggingEnabled = DEFAULT_CONFIGS.loggingEnabled;\n  }\n  if (entries.fpr_log_source) {\n    settingsServiceInstance.logSource = Number(entries.fpr_log_source);\n  } else if (DEFAULT_CONFIGS.logSource) {\n    settingsServiceInstance.logSource = DEFAULT_CONFIGS.logSource;\n  }\n\n  if (entries.fpr_log_endpoint_url) {\n    settingsServiceInstance.logEndPointUrl = entries.fpr_log_endpoint_url;\n  } else if (DEFAULT_CONFIGS.logEndPointUrl) {\n    settingsServiceInstance.logEndPointUrl = DEFAULT_CONFIGS.logEndPointUrl;\n  }\n\n  // Key from Remote Config has to be non-empty string, otherwsie use local value.\n  if (entries.fpr_log_transport_key) {\n    settingsServiceInstance.transportKey = entries.fpr_log_transport_key;\n  } else if (DEFAULT_CONFIGS.transportKey) {\n    settingsServiceInstance.transportKey = DEFAULT_CONFIGS.transportKey;\n  }\n\n  if (entries.fpr_vc_network_request_sampling_rate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate = Number(\n      entries.fpr_vc_network_request_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.networkRequestsSamplingRate !== undefined) {\n    settingsServiceInstance.networkRequestsSamplingRate =\n      DEFAULT_CONFIGS.networkRequestsSamplingRate;\n  }\n  if (entries.fpr_vc_trace_sampling_rate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate = Number(\n      entries.fpr_vc_trace_sampling_rate\n    );\n  } else if (DEFAULT_CONFIGS.tracesSamplingRate !== undefined) {\n    settingsServiceInstance.tracesSamplingRate =\n      DEFAULT_CONFIGS.tracesSamplingRate;\n  }\n  // Set the per session trace and network logging flags.\n  settingsServiceInstance.logTraceAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.tracesSamplingRate\n  );\n  settingsServiceInstance.logNetworkAfterSampling = shouldLogAfterSampling(\n    settingsServiceInstance.networkRequestsSamplingRate\n  );\n  return config;\n}\n\nfunction configValid(expiry: string): boolean {\n  return Number(expiry) > Date.now();\n}\n\nfunction shouldLogAfterSampling(samplingRate: number): boolean {\n  return Math.random() <= samplingRate;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIidPromise } from './iid_service';\nimport { getConfig } from './remote_config_service';\nimport { Api } from './api_service';\n\nconst enum InitializationStatus {\n  notInitialized = 1,\n  initializationPending,\n  initialized\n}\n\nlet initializationStatus = InitializationStatus.notInitialized;\n\nlet initializationPromise: Promise<void> | undefined;\n\nexport function getInitializationPromise(): Promise<void> {\n  initializationStatus = InitializationStatus.initializationPending;\n\n  initializationPromise = initializationPromise || initializePerf();\n\n  return initializationPromise;\n}\n\nexport function isPerfInitialized(): boolean {\n  return initializationStatus === InitializationStatus.initialized;\n}\n\nfunction initializePerf(): Promise<void> {\n  return getDocumentReadyComplete()\n    .then(() => getIidPromise())\n    .then(iid => getConfig(iid))\n    .then(\n      () => changeInitializationStatus(),\n      () => changeInitializationStatus()\n    );\n}\n\n/**\n * Returns a promise which resolves whenever the document readystate is complete or\n * immediately if it is called after page load complete.\n */\nfunction getDocumentReadyComplete(): Promise<void> {\n  const document = Api.getInstance().document;\n  return new Promise(resolve => {\n    if (document && document.readyState !== 'complete') {\n      const handler = (): void => {\n        if (document.readyState === 'complete') {\n          document.removeEventListener('readystatechange', handler);\n          resolve();\n        }\n      };\n      document.addEventListener('readystatechange', handler);\n    } else {\n      resolve();\n    }\n  });\n}\n\nfunction changeInitializationStatus(): void {\n  initializationStatus = InitializationStatus.initialized;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { SettingsService } from './settings_service';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst DEFAULT_SEND_INTERVAL_MS = 10 * 1000;\nconst INITIAL_SEND_TIME_DELAY_MS = 5.5 * 1000;\n// If end point does not work, the call will be tried for these many times.\nconst DEFAULT_REMAINING_TRIES = 3;\nlet remainingTries = DEFAULT_REMAINING_TRIES;\n\ninterface LogResponseDetails {\n  responseAction?: string;\n}\n\ninterface BatchEvent {\n  message: string;\n  eventTime: number;\n}\n\n/* eslint-disable camelcase */\n// CC/Fl accepted log format.\ninterface TransportBatchLogFormat {\n  request_time_ms: string;\n  client_info: ClientInfo;\n  log_source: number;\n  log_event: Log[];\n}\n\ninterface ClientInfo {\n  client_type: number;\n  js_client_info: {};\n}\n\ninterface Log {\n  source_extension_json_proto3: string;\n  event_time_ms: string;\n}\n/* eslint-enable camelcase */\n\nlet queue: BatchEvent[] = [];\n\nlet isTransportSetup: boolean = false;\n\nexport function setupTransportService(): void {\n  if (!isTransportSetup) {\n    processQueue(INITIAL_SEND_TIME_DELAY_MS);\n    isTransportSetup = true;\n  }\n}\n\n/**\n * Utilized by testing to clean up message queue and un-initialize transport service.\n */\nexport function resetTransportService(): void {\n  isTransportSetup = false;\n  queue = [];\n}\n\nfunction processQueue(timeOffset: number): void {\n  setTimeout(() => {\n    // If there is no remainingTries left, stop retrying.\n    if (remainingTries === 0) {\n      return;\n    }\n\n    // If there are no events to process, wait for DEFAULT_SEND_INTERVAL_MS and try again.\n    if (!queue.length) {\n      return processQueue(DEFAULT_SEND_INTERVAL_MS);\n    }\n\n    dispatchQueueEvents();\n  }, timeOffset);\n}\n\nfunction dispatchQueueEvents(): void {\n  // Capture a snapshot of the queue and empty the \"official queue\".\n  const staged = [...queue];\n  queue = [];\n\n  /* eslint-disable camelcase */\n  // We will pass the JSON serialized event to the backend.\n  const log_event: Log[] = staged.map(evt => ({\n    source_extension_json_proto3: evt.message,\n    event_time_ms: String(evt.eventTime)\n  }));\n\n  const data: TransportBatchLogFormat = {\n    request_time_ms: String(Date.now()),\n    client_info: {\n      client_type: 1, // 1 is JS\n      js_client_info: {}\n    },\n    log_source: SettingsService.getInstance().logSource,\n    log_event\n  };\n  /* eslint-enable camelcase */\n\n  sendEventsToFl(data, staged).catch(() => {\n    // If the request fails for some reason, add the events that were attempted\n    // back to the primary queue to retry later.\n    queue = [...staged, ...queue];\n    remainingTries--;\n    consoleLogger.info(`Tries left: ${remainingTries}.`);\n    processQueue(DEFAULT_SEND_INTERVAL_MS);\n  });\n}\n\nfunction sendEventsToFl(\n  data: TransportBatchLogFormat,\n  staged: BatchEvent[]\n): Promise<void> {\n  return postToFlEndpoint(data)\n    .then(res => {\n      if (!res.ok) {\n        consoleLogger.info('Call to Firebase backend failed.');\n      }\n      return res.json();\n    })\n    .then(res => {\n      // Find the next call wait time from the response.\n      const transportWait = Number(res.nextRequestWaitMillis);\n      let requestOffset = DEFAULT_SEND_INTERVAL_MS;\n      if (!isNaN(transportWait)) {\n        requestOffset = Math.max(transportWait, requestOffset);\n      }\n\n      // Delete request if response include RESPONSE_ACTION_UNKNOWN or DELETE_REQUEST action.\n      // Otherwise, retry request using normal scheduling if response include RETRY_REQUEST_LATER.\n      const logResponseDetails: LogResponseDetails[] = res.logResponseDetails;\n      if (\n        Array.isArray(logResponseDetails) &&\n        logResponseDetails.length > 0 &&\n        logResponseDetails[0].responseAction === 'RETRY_REQUEST_LATER'\n      ) {\n        queue = [...staged, ...queue];\n        consoleLogger.info(`Retry transport request later.`);\n      }\n\n      remainingTries = DEFAULT_REMAINING_TRIES;\n      // Schedule the next process.\n      processQueue(requestOffset);\n    });\n}\n\nfunction postToFlEndpoint(data: TransportBatchLogFormat): Promise<Response> {\n  const flTransportFullUrl = SettingsService.getInstance().getFlTransportFullUrl();\n  return fetch(flTransportFullUrl, {\n    method: 'POST',\n    body: JSON.stringify(data)\n  });\n}\n\nfunction addToQueue(evt: BatchEvent): void {\n  if (!evt.eventTime || !evt.message) {\n    throw ERROR_FACTORY.create(ErrorCode.INVALID_CC_LOG);\n  }\n  // Add the new event to the queue.\n  queue = [...queue, evt];\n}\n\n/** Log handler for cc service to send the performance logs to the server. */\nexport function transportHandler(\n  // eslint-disable-next-line @typescript-eslint/no-explicit-any\n  serializer: (...args: any[]) => string\n): (...args: unknown[]) => void {\n  return (...args) => {\n    const message = serializer(...args);\n    addToQueue({\n      message,\n      eventTime: Date.now()\n    });\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { getIid } from './iid_service';\nimport { NetworkRequest } from '../resources/network_request';\nimport { Trace } from '../resources/trace';\nimport { Api } from './api_service';\nimport { SettingsService } from './settings_service';\nimport {\n  getServiceWorkerStatus,\n  getVisibilityState,\n  VisibilityState,\n  getEffectiveConnectionType\n} from '../utils/attributes_utils';\nimport {\n  isPerfInitialized,\n  getInitializationPromise\n} from './initialization_service';\nimport { transportHandler } from './transport_service';\nimport { SDK_VERSION } from '../constants';\n\nconst enum ResourceType {\n  NetworkRequest,\n  Trace\n}\n\n/* eslint-disable camelcase */\ninterface ApplicationInfo {\n  google_app_id: string;\n  app_instance_id?: string;\n  web_app_info: WebAppInfo;\n  application_process_state: number;\n}\n\ninterface WebAppInfo {\n  sdk_version: string;\n  page_url: string;\n  service_worker_status: number;\n  visibility_state: number;\n  effective_connection_type: number;\n}\n\ninterface PerfNetworkLog {\n  application_info: ApplicationInfo;\n  network_request_metric: NetworkRequestMetric;\n}\n\ninterface PerfTraceLog {\n  application_info: ApplicationInfo;\n  trace_metric: TraceMetric;\n}\n\ninterface NetworkRequestMetric {\n  url: string;\n  http_method: number;\n  http_response_code: number;\n  response_payload_bytes?: number;\n  client_start_time_us?: number;\n  time_to_response_initiated_us?: number;\n  time_to_response_completed_us?: number;\n}\n\ninterface TraceMetric {\n  name: string;\n  is_auto: boolean;\n  client_start_time_us: number;\n  duration_us: number;\n  counters?: { [key: string]: number };\n  custom_attributes?: { [key: string]: string };\n}\n\n/* eslint-enble camelcase */\n\nlet logger: (\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n) => void | undefined;\n// This method is not called before initialization.\nfunction sendLog(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): void {\n  if (!logger) {\n    logger = transportHandler(serializer);\n  }\n  logger(resource, resourceType);\n}\n\nexport function logTrace(trace: Trace): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log if trace is auto generated and instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled && trace.isAuto) {\n    return;\n  }\n  // Do not log if trace is custom and data collection is disabled.\n  if (!settingsService.dataCollectionEnabled && !trace.isAuto) {\n    return;\n  }\n  // Do not log if required apis are not available.\n  if (!Api.getInstance().requiredApisAvailable()) {\n    return;\n  }\n\n  // Only log the page load auto traces if page is visible.\n  if (trace.isAuto && getVisibilityState() !== VisibilityState.VISIBLE) {\n    return;\n  }\n\n  if (isPerfInitialized()) {\n    sendTraceLog(trace);\n  } else {\n    // Custom traces can be used before the initialization but logging\n    // should wait until after.\n\n    getInitializationPromise().then(\n      () => sendTraceLog(trace),\n      () => sendTraceLog(trace)\n    );\n  }\n}\n\nfunction sendTraceLog(trace: Trace): void {\n  if (!getIid()) {\n    return;\n  }\n\n  const settingsService = SettingsService.getInstance();\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logTraceAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(trace, ResourceType.Trace), 0);\n}\n\nexport function logNetworkRequest(networkRequest: NetworkRequest): void {\n  const settingsService = SettingsService.getInstance();\n  // Do not log network requests if instrumentation is disabled.\n  if (!settingsService.instrumentationEnabled) {\n    return;\n  }\n\n  // Do not log the js sdk's call to transport service domain to avoid unnecessary cycle.\n  // Need to blacklist both old and new endpoints to avoid migration gap.\n  const networkRequestUrl = networkRequest.url;\n\n  // Blacklist old log endpoint and new transport endpoint.\n  // Because Performance SDK doesn't instrument requests sent from SDK itself.\n  const logEndpointUrl = settingsService.logEndPointUrl.split('?')[0];\n  const flEndpointUrl = settingsService.flTransportEndpointUrl.split('?')[0];\n  if (\n    networkRequestUrl === logEndpointUrl ||\n    networkRequestUrl === flEndpointUrl\n  ) {\n    return;\n  }\n\n  if (\n    !settingsService.loggingEnabled ||\n    !settingsService.logNetworkAfterSampling\n  ) {\n    return;\n  }\n\n  setTimeout(() => sendLog(networkRequest, ResourceType.NetworkRequest), 0);\n}\n\nfunction serializer(\n  resource: NetworkRequest | Trace,\n  resourceType: ResourceType\n): string {\n  if (resourceType === ResourceType.NetworkRequest) {\n    return serializeNetworkRequest(resource as NetworkRequest);\n  }\n  return serializeTrace(resource as Trace);\n}\n\nfunction serializeNetworkRequest(networkRequest: NetworkRequest): string {\n  const networkRequestMetric: NetworkRequestMetric = {\n    url: networkRequest.url,\n    http_method: networkRequest.httpMethod || 0,\n    http_response_code: 200,\n    response_payload_bytes: networkRequest.responsePayloadBytes,\n    client_start_time_us: networkRequest.startTimeUs,\n    time_to_response_initiated_us: networkRequest.timeToResponseInitiatedUs,\n    time_to_response_completed_us: networkRequest.timeToResponseCompletedUs\n  };\n  const perfMetric: PerfNetworkLog = {\n    application_info: getApplicationInfo(),\n    network_request_metric: networkRequestMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction serializeTrace(trace: Trace): string {\n  const traceMetric: TraceMetric = {\n    name: trace.name,\n    is_auto: trace.isAuto,\n    client_start_time_us: trace.startTimeUs,\n    duration_us: trace.durationUs\n  };\n\n  if (Object.keys(trace.counters).length !== 0) {\n    traceMetric.counters = trace.counters;\n  }\n  const customAttributes = trace.getAttributes();\n  if (Object.keys(customAttributes).length !== 0) {\n    traceMetric.custom_attributes = customAttributes;\n  }\n\n  const perfMetric: PerfTraceLog = {\n    application_info: getApplicationInfo(),\n    trace_metric: traceMetric\n  };\n  return JSON.stringify(perfMetric);\n}\n\nfunction getApplicationInfo(): ApplicationInfo {\n  return {\n    google_app_id: SettingsService.getInstance().getAppId(),\n    app_instance_id: getIid(),\n    web_app_info: {\n      sdk_version: SDK_VERSION,\n      page_url: Api.getInstance().getUrl(),\n      service_worker_status: getServiceWorkerStatus(),\n      visibility_state: getVisibilityState(),\n      effective_connection_type: getEffectiveConnectionType()\n    },\n    application_process_state: 0\n  };\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME,\n  OOB_TRACE_PAGE_LOAD_PREFIX\n} from '../constants';\nimport { consoleLogger } from '../utils/console_logger';\n\nconst MAX_METRIC_NAME_LENGTH = 100;\nconst RESERVED_AUTO_PREFIX = '_';\nconst oobMetrics = [\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n];\n\n/**\n * Returns true if the metric is custom and does not start with reserved prefix, or if\n * the metric is one of out of the box page load trace metrics.\n */\nexport function isValidMetricName(name: string, traceName?: string): boolean {\n  if (name.length === 0 || name.length > MAX_METRIC_NAME_LENGTH) {\n    return false;\n  }\n  return (\n    (traceName &&\n      traceName.startsWith(OOB_TRACE_PAGE_LOAD_PREFIX) &&\n      oobMetrics.indexOf(name) > -1) ||\n    !name.startsWith(RESERVED_AUTO_PREFIX)\n  );\n}\n\n/**\n * Converts the provided value to an integer value to be used in case of a metric.\n * @param providedValue Provided number value of the metric that needs to be converted to an integer.\n *\n * @returns Converted integer number to be set for the metric.\n */\nexport function convertMetricValueToInteger(providedValue: number): number {\n  const valueAsInteger: number = Math.floor(providedValue);\n  if (valueAsInteger < providedValue) {\n    consoleLogger.info(\n      `Metric value should be an Integer, setting the value as : ${valueAsInteger}.`\n    );\n  }\n  return valueAsInteger;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  TRACE_START_MARK_PREFIX,\n  TRACE_STOP_MARK_PREFIX,\n  TRACE_MEASURE_PREFIX,\n  OOB_TRACE_PAGE_LOAD_PREFIX,\n  FIRST_PAINT_COUNTER_NAME,\n  FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n  FIRST_INPUT_DELAY_COUNTER_NAME\n} from '../constants';\nimport { Api } from '../services/api_service';\nimport { logTrace } from '../services/perf_logger';\nimport { ERROR_FACTORY, ErrorCode } from '../utils/errors';\nimport {\n  isValidCustomAttributeName,\n  isValidCustomAttributeValue\n} from '../utils/attributes_utils';\nimport {\n  isValidMetricName,\n  convertMetricValueToInteger\n} from '../utils/metric_utils';\nimport { PerformanceTrace } from '@firebase/performance-types';\n\nconst enum TraceState {\n  UNINITIALIZED = 1,\n  RUNNING,\n  TERMINATED\n}\n\nexport class Trace implements PerformanceTrace {\n  private state: TraceState = TraceState.UNINITIALIZED;\n  startTimeUs!: number;\n  durationUs!: number;\n  private customAttributes: { [key: string]: string } = {};\n  counters: { [counterName: string]: number } = {};\n  private api = Api.getInstance();\n  private randomId = Math.floor(Math.random() * 1000000);\n  private traceStartMark!: string;\n  private traceStopMark!: string;\n  private traceMeasure!: string;\n\n  /**\n   * @param name The name of the trace.\n   * @param isAuto If the trace is auto-instrumented.\n   * @param traceMeasureName The name of the measure marker in user timing specification. This field\n   * is only set when the trace is built for logging when the user directly uses the user timing\n   * api (performance.mark and performance.measure).\n   */\n  constructor(\n    readonly name: string,\n    readonly isAuto = false,\n    traceMeasureName?: string\n  ) {\n    if (!this.isAuto) {\n      this.traceStartMark = `${TRACE_START_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceStopMark = `${TRACE_STOP_MARK_PREFIX}-${this.randomId}-${this.name}`;\n      this.traceMeasure =\n        traceMeasureName ||\n        `${TRACE_MEASURE_PREFIX}-${this.randomId}-${this.name}`;\n\n      if (traceMeasureName) {\n        // For the case of direct user timing traces, no start stop will happen. The measure object\n        // is already available.\n        this.calculateTraceMetrics();\n      }\n    }\n  }\n\n  /**\n   * Starts a trace. The measurement of the duration starts at this point.\n   */\n  start(): void {\n    if (this.state !== TraceState.UNINITIALIZED) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STARTED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.api.mark(this.traceStartMark);\n    this.state = TraceState.RUNNING;\n  }\n\n  /**\n   * Stops the trace. The measurement of the duration of the trace stops at this point and trace\n   * is logged.\n   */\n  stop(): void {\n    if (this.state !== TraceState.RUNNING) {\n      throw ERROR_FACTORY.create(ErrorCode.TRACE_STOPPED_BEFORE, {\n        traceName: this.name\n      });\n    }\n    this.state = TraceState.TERMINATED;\n    this.api.mark(this.traceStopMark);\n    this.api.measure(\n      this.traceMeasure,\n      this.traceStartMark,\n      this.traceStopMark\n    );\n    this.calculateTraceMetrics();\n    logTrace(this);\n  }\n\n  /**\n   * Records a trace with predetermined values. If this method is used a trace is created and logged\n   * directly. No need to use start and stop methods.\n   * @param startTime Trace start time since epoch in millisec\n   * @param duration The duraction of the trace in millisec\n   * @param options An object which can optionally hold maps of custom metrics and custom attributes\n   */\n  record(\n    startTime: number,\n    duration: number,\n    options?: {\n      metrics?: { [key: string]: number };\n      attributes?: { [key: string]: string };\n    }\n  ): void {\n    if (startTime <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_START_TIME, {\n        traceName: this.name\n      });\n    }\n    if (duration <= 0) {\n      throw ERROR_FACTORY.create(ErrorCode.NONPOSITIVE_TRACE_DURATION, {\n        traceName: this.name\n      });\n    }\n\n    this.durationUs = Math.floor(duration * 1000);\n    this.startTimeUs = Math.floor(startTime * 1000);\n    if (options && options.attributes) {\n      this.customAttributes = { ...options.attributes };\n    }\n    if (options && options.metrics) {\n      for (const metric of Object.keys(options.metrics)) {\n        if (!isNaN(Number(options.metrics[metric]))) {\n          this.counters[metric] = Number(Math.floor(options.metrics[metric]));\n        }\n      }\n    }\n    logTrace(this);\n  }\n\n  /**\n   * Increments a custom metric by a certain number or 1 if number not specified. Will create a new\n   * custom metric if one with the given name does not exist. The value will be floored down to an\n   * integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Increment by value\n   */\n  incrementMetric(counter: string, numAsInteger = 1): void {\n    if (this.counters[counter] === undefined) {\n      this.putMetric(counter, numAsInteger);\n    } else {\n      this.putMetric(counter, this.counters[counter] + numAsInteger);\n    }\n  }\n\n  /**\n   * Sets a custom metric to a specified value. Will create a new custom metric if one with the\n   * given name does not exist. The value will be floored down to an integer.\n   * @param counter Name of the custom metric\n   * @param numAsInteger Set custom metric to this value\n   */\n  putMetric(counter: string, numAsInteger: number): void {\n    if (isValidMetricName(counter, this.name)) {\n      this.counters[counter] = convertMetricValueToInteger(numAsInteger);\n    } else {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_CUSTOM_METRIC_NAME, {\n        customMetricName: counter\n      });\n    }\n  }\n\n  /**\n   * Returns the value of the custom metric by that name. If a custom metric with that name does\n   * not exist will return zero.\n   * @param counter\n   */\n  getMetric(counter: string): number {\n    return this.counters[counter] || 0;\n  }\n\n  /**\n   * Sets a custom attribute of a trace to a certain value.\n   * @param attr\n   * @param value\n   */\n  putAttribute(attr: string, value: string): void {\n    const isValidName = isValidCustomAttributeName(attr);\n    const isValidValue = isValidCustomAttributeValue(value);\n    if (isValidName && isValidValue) {\n      this.customAttributes[attr] = value;\n      return;\n    }\n    // Throw appropriate error when the attribute name or value is invalid.\n    if (!isValidName) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_NAME, {\n        attributeName: attr\n      });\n    }\n    if (!isValidValue) {\n      throw ERROR_FACTORY.create(ErrorCode.INVALID_ATTRIBUTE_VALUE, {\n        attributeValue: value\n      });\n    }\n  }\n\n  /**\n   * Retrieves the value a custom attribute of a trace is set to.\n   * @param attr\n   */\n  getAttribute(attr: string): string | undefined {\n    return this.customAttributes[attr];\n  }\n\n  removeAttribute(attr: string): void {\n    if (this.customAttributes[attr] === undefined) {\n      return;\n    }\n    delete this.customAttributes[attr];\n  }\n\n  getAttributes(): { [key: string]: string } {\n    return { ...this.customAttributes };\n  }\n\n  private setStartTime(startTime: number): void {\n    this.startTimeUs = startTime;\n  }\n\n  private setDuration(duration: number): void {\n    this.durationUs = duration;\n  }\n\n  /**\n   * Calculates and assigns the duration and start time of the trace using the measure performance\n   * entry.\n   */\n  private calculateTraceMetrics(): void {\n    const perfMeasureEntries = this.api.getEntriesByName(this.traceMeasure);\n    const perfMeasureEntry = perfMeasureEntries && perfMeasureEntries[0];\n    if (perfMeasureEntry) {\n      this.durationUs = Math.floor(perfMeasureEntry.duration * 1000);\n      this.startTimeUs = Math.floor(\n        (perfMeasureEntry.startTime + this.api.getTimeOrigin()) * 1000\n      );\n    }\n  }\n\n  /**\n   * @param navigationTimings A single element array which contains the navigationTIming object of\n   * the page load\n   * @param paintTimings A array which contains paintTiming object of the page load\n   * @param firstInputDelay First input delay in millisec\n   */\n  static createOobTrace(\n    navigationTimings: PerformanceNavigationTiming[],\n    paintTimings: PerformanceEntry[],\n    firstInputDelay?: number\n  ): void {\n    const route = Api.getInstance().getUrl();\n    if (!route) {\n      return;\n    }\n    const trace = new Trace(OOB_TRACE_PAGE_LOAD_PREFIX + route, true);\n    const timeOriginUs = Math.floor(Api.getInstance().getTimeOrigin() * 1000);\n    trace.setStartTime(timeOriginUs);\n\n    // navigationTimings includes only one element.\n    if (navigationTimings && navigationTimings[0]) {\n      trace.setDuration(Math.floor(navigationTimings[0].duration * 1000));\n      trace.putMetric(\n        'domInteractive',\n        Math.floor(navigationTimings[0].domInteractive * 1000)\n      );\n      trace.putMetric(\n        'domContentLoadedEventEnd',\n        Math.floor(navigationTimings[0].domContentLoadedEventEnd * 1000)\n      );\n      trace.putMetric(\n        'loadEventEnd',\n        Math.floor(navigationTimings[0].loadEventEnd * 1000)\n      );\n    }\n\n    const FIRST_PAINT = 'first-paint';\n    const FIRST_CONTENTFUL_PAINT = 'first-contentful-paint';\n    if (paintTimings) {\n      const firstPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_PAINT\n      );\n      if (firstPaint && firstPaint.startTime) {\n        trace.putMetric(\n          FIRST_PAINT_COUNTER_NAME,\n          Math.floor(firstPaint.startTime * 1000)\n        );\n      }\n      const firstContentfulPaint = paintTimings.find(\n        paintObject => paintObject.name === FIRST_CONTENTFUL_PAINT\n      );\n      if (firstContentfulPaint && firstContentfulPaint.startTime) {\n        trace.putMetric(\n          FIRST_CONTENTFUL_PAINT_COUNTER_NAME,\n          Math.floor(firstContentfulPaint.startTime * 1000)\n        );\n      }\n\n      if (firstInputDelay) {\n        trace.putMetric(\n          FIRST_INPUT_DELAY_COUNTER_NAME,\n          Math.floor(firstInputDelay * 1000)\n        );\n      }\n    }\n\n    logTrace(trace);\n  }\n\n  static createUserTimingTrace(measureName: string): void {\n    const trace = new Trace(measureName, false, measureName);\n    logTrace(trace);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Api } from '../services/api_service';\nimport { logNetworkRequest } from '../services/perf_logger';\n\n// The order of values of this enum should not be changed.\nexport const enum HttpMethod {\n  HTTP_METHOD_UNKNOWN = 0,\n  GET = 1,\n  PUT = 2,\n  POST = 3,\n  DELETE = 4,\n  HEAD = 5,\n  PATCH = 6,\n  OPTIONS = 7,\n  TRACE = 8,\n  CONNECT = 9\n}\n\n// Durations are in microseconds.\nexport interface NetworkRequest {\n  url: string;\n  httpMethod?: HttpMethod;\n  requestPayloadBytes?: number;\n  responsePayloadBytes?: number;\n  httpResponseCode?: number;\n  responseContentType?: string;\n  startTimeUs?: number;\n  timeToRequestCompletedUs?: number;\n  timeToResponseInitiatedUs?: number;\n  timeToResponseCompletedUs?: number;\n}\n\nexport function createNetworkRequestEntry(entry: PerformanceEntry): void {\n  const performanceEntry = entry as PerformanceResourceTiming;\n  if (!performanceEntry || performanceEntry.responseStart === undefined) {\n    return;\n  }\n  const timeOrigin = Api.getInstance().getTimeOrigin();\n  const startTimeUs = Math.floor(\n    (performanceEntry.startTime + timeOrigin) * 1000\n  );\n  const timeToResponseInitiatedUs = performanceEntry.responseStart\n    ? Math.floor(\n        (performanceEntry.responseStart - performanceEntry.startTime) * 1000\n      )\n    : undefined;\n  const timeToResponseCompletedUs = Math.floor(\n    (performanceEntry.responseEnd - performanceEntry.startTime) * 1000\n  );\n  // Remove the query params from logged network request url.\n  const url = performanceEntry.name && performanceEntry.name.split('?')[0];\n  const networkRequest: NetworkRequest = {\n    url,\n    responsePayloadBytes: performanceEntry.transferSize,\n    startTimeUs,\n    timeToResponseInitiatedUs,\n    timeToResponseCompletedUs\n  };\n\n  logNetworkRequest(networkRequest);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Api } from './api_service';\nimport { Trace } from '../resources/trace';\nimport { createNetworkRequestEntry } from '../resources/network_request';\nimport { TRACE_MEASURE_PREFIX } from '../constants';\nimport { getIid } from './iid_service';\n\nconst FID_WAIT_TIME_MS = 5000;\n\nexport function setupOobResources(): void {\n  // Do not initialize unless iid is available.\n  if (!getIid()) {\n    return;\n  }\n  // The load event might not have fired yet, and that means performance navigation timing\n  // object has a duration of 0. The setup should run after all current tasks in js queue.\n  setTimeout(() => setupOobTraces(), 0);\n  setTimeout(() => setupNetworkRequests(), 0);\n  setTimeout(() => setupUserTimingTraces(), 0);\n}\n\nfunction setupNetworkRequests(): void {\n  const api = Api.getInstance();\n  const resources = api.getEntriesByType('resource');\n  for (const resource of resources) {\n    createNetworkRequestEntry(resource);\n  }\n  api.setupObserver('resource', createNetworkRequestEntry);\n}\n\nfunction setupOobTraces(): void {\n  const api = Api.getInstance();\n  const navigationTimings = api.getEntriesByType(\n    'navigation'\n  ) as PerformanceNavigationTiming[];\n  const paintTimings = api.getEntriesByType('paint');\n  // If First Input Desly polyfill is added to the page, report the fid value.\n  // https://github.com/GoogleChromeLabs/first-input-delay\n  if (api.onFirstInputDelay) {\n    // If the fid call back is not called for certain time, continue without it.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    let timeoutId: any = setTimeout(() => {\n      Trace.createOobTrace(navigationTimings, paintTimings);\n      timeoutId = undefined;\n    }, FID_WAIT_TIME_MS);\n    api.onFirstInputDelay((fid: number) => {\n      if (timeoutId) {\n        clearTimeout(timeoutId);\n        Trace.createOobTrace(navigationTimings, paintTimings, fid);\n      }\n    });\n  } else {\n    Trace.createOobTrace(navigationTimings, paintTimings);\n  }\n}\n\nfunction setupUserTimingTraces(): void {\n  const api = Api.getInstance();\n  // Run through the measure performance entries collected up to this point.\n  const measures = api.getEntriesByType('measure');\n  for (const measure of measures) {\n    createUserTimingTrace(measure);\n  }\n  // Setup an observer to capture the measures from this point on.\n  api.setupObserver('measure', createUserTimingTrace);\n}\n\nfunction createUserTimingTrace(measure: PerformanceEntry): void {\n  const measureName = measure.name;\n  // Do not create a trace, if the user timing marks and measures are created by the sdk itself.\n  if (\n    measureName.substring(0, TRACE_MEASURE_PREFIX.length) ===\n    TRACE_MEASURE_PREFIX\n  ) {\n    return;\n  }\n  Trace.createUserTimingTrace(measureName);\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\nimport { Trace } from '../resources/trace';\nimport { setupOobResources } from '../services/oob_resources_service';\nimport { SettingsService } from '../services/settings_service';\nimport { getInitializationPromise } from '../services/initialization_service';\nimport { Api } from '../services/api_service';\nimport { FirebaseApp } from '@firebase/app-types';\nimport { FirebasePerformance } from '@firebase/performance-types';\nimport { setupTransportService } from '../services/transport_service';\nimport { validateIndexedDBOpenable } from '@firebase/util';\nimport { consoleLogger } from '../utils/console_logger';\nexport class PerformanceController implements FirebasePerformance {\n  constructor(readonly app: FirebaseApp) {\n    if (Api.getInstance().requiredApisAvailable()) {\n      validateIndexedDBOpenable()\n        .then(isAvailable => {\n          if (isAvailable) {\n            setupTransportService();\n            getInitializationPromise().then(\n              setupOobResources,\n              setupOobResources\n            );\n          }\n        })\n        .catch(error => {\n          consoleLogger.info(`Environment doesn't support IndexedDB: ${error}`);\n        });\n    }\n  }\n\n  trace(name: string): Trace {\n    return new Trace(name);\n  }\n\n  set instrumentationEnabled(val: boolean) {\n    SettingsService.getInstance().instrumentationEnabled = val;\n  }\n  get instrumentationEnabled(): boolean {\n    return SettingsService.getInstance().instrumentationEnabled;\n  }\n\n  set dataCollectionEnabled(val: boolean) {\n    SettingsService.getInstance().dataCollectionEnabled = val;\n  }\n  get dataCollectionEnabled(): boolean {\n    return SettingsService.getInstance().dataCollectionEnabled;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { StorageCache } from '../storage/storage_cache';\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { Storage } from '../storage/storage';\nimport { Logger } from '@firebase/logger';\n\n/**\n * Implements the {@link RemoteConfigClient} abstraction with success response caching.\n *\n * <p>Comparable to the browser's Cache API for responses, but the Cache API requires a Service\n * Worker, which requires HTTPS, which would significantly complicate SDK installation. Also, the\n * Cache API doesn't support matching entries by time.\n */\nexport class CachingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage,\n    private readonly storageCache: StorageCache,\n    private readonly logger: Logger\n  ) {}\n\n  /**\n   * Returns true if the age of the cached fetched configs is less than or equal to\n   * {@link Settings#minimumFetchIntervalInSeconds}.\n   *\n   * <p>This is comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the\n   * native Fetch API.\n   *\n   * <p>Visible for testing.\n   */\n  isCachedDataFresh(\n    cacheMaxAgeMillis: number,\n    lastSuccessfulFetchTimestampMillis: number | undefined\n  ): boolean {\n    // Cache can only be fresh if it's populated.\n    if (!lastSuccessfulFetchTimestampMillis) {\n      this.logger.debug('Config fetch cache check. Cache unpopulated.');\n      return false;\n    }\n\n    // Calculates age of cache entry.\n    const cacheAgeMillis = Date.now() - lastSuccessfulFetchTimestampMillis;\n\n    const isCachedDataFresh = cacheAgeMillis <= cacheMaxAgeMillis;\n\n    this.logger.debug(\n      'Config fetch cache check.' +\n        ` Cache age millis: ${cacheAgeMillis}.` +\n        ` Cache max age millis (minimumFetchIntervalMillis setting): ${cacheMaxAgeMillis}.` +\n        ` Is cache hit: ${isCachedDataFresh}.`\n    );\n\n    return isCachedDataFresh;\n  }\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    // Reads from persisted storage to avoid cache miss if callers don't wait on initialization.\n    const [\n      lastSuccessfulFetchTimestampMillis,\n      lastSuccessfulFetchResponse\n    ] = await Promise.all([\n      this.storage.getLastSuccessfulFetchTimestampMillis(),\n      this.storage.getLastSuccessfulFetchResponse()\n    ]);\n\n    // Exits early on cache hit.\n    if (\n      lastSuccessfulFetchResponse &&\n      this.isCachedDataFresh(\n        request.cacheMaxAgeMillis,\n        lastSuccessfulFetchTimestampMillis\n      )\n    ) {\n      return lastSuccessfulFetchResponse;\n    }\n\n    // Deviates from pure decorator by not honoring a passed ETag since we don't have a public API\n    // that allows the caller to pass an ETag.\n    request.eTag =\n      lastSuccessfulFetchResponse && lastSuccessfulFetchResponse.eTag;\n\n    // Falls back to service on cache miss.\n    const response = await this.client.fetch(request);\n\n    // Fetch throws for non-success responses, so success is guaranteed here.\n\n    const storageOperations = [\n      // Uses write-through cache for consistency with synchronous public API.\n      this.storageCache.setLastSuccessfulFetchTimestampMillis(Date.now())\n    ];\n\n    if (response.status === 200) {\n      // Caches response only if it has changed, ie non-304 responses.\n      storageOperations.push(\n        this.storage.setLastSuccessfulFetchResponse(response)\n      );\n    }\n\n    await Promise.all(storageOperations);\n\n    return response;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { ErrorFactory, FirebaseError } from '@firebase/util';\n\nexport const enum ErrorCode {\n  REGISTRATION_WINDOW = 'registration-window',\n  REGISTRATION_PROJECT_ID = 'registration-project-id',\n  REGISTRATION_API_KEY = 'registration-api-key',\n  REGISTRATION_APP_ID = 'registration-app-id',\n  STORAGE_OPEN = 'storage-open',\n  STORAGE_GET = 'storage-get',\n  STORAGE_SET = 'storage-set',\n  STORAGE_DELETE = 'storage-delete',\n  FETCH_NETWORK = 'fetch-client-network',\n  FETCH_TIMEOUT = 'fetch-timeout',\n  FETCH_THROTTLE = 'fetch-throttle',\n  FETCH_PARSE = 'fetch-client-parse',\n  FETCH_STATUS = 'fetch-status'\n}\n\nconst ERROR_DESCRIPTION_MAP: { readonly [key in ErrorCode]: string } = {\n  [ErrorCode.REGISTRATION_WINDOW]:\n    'Undefined window object. This SDK only supports usage in a browser environment.',\n  [ErrorCode.REGISTRATION_PROJECT_ID]:\n    'Undefined project identifier. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_API_KEY]:\n    'Undefined API key. Check Firebase app initialization.',\n  [ErrorCode.REGISTRATION_APP_ID]:\n    'Undefined app identifier. Check Firebase app initialization.',\n  [ErrorCode.STORAGE_OPEN]:\n    'Error thrown when opening storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_GET]:\n    'Error thrown when reading from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_SET]:\n    'Error thrown when writing to storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.STORAGE_DELETE]:\n    'Error thrown when deleting from storage. Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_NETWORK]:\n    'Fetch client failed to connect to a network. Check Internet connection.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_TIMEOUT]:\n    'The config fetch request timed out. ' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.',\n  [ErrorCode.FETCH_THROTTLE]:\n    'The config fetch request timed out while in an exponential backoff state.' +\n    ' Configure timeout using \"fetchTimeoutMillis\" SDK setting.' +\n    ' Unix timestamp in milliseconds when fetch request throttling ends: {$throttleEndTimeMillis}.',\n  [ErrorCode.FETCH_PARSE]:\n    'Fetch client could not parse response.' +\n    ' Original error: {$originalErrorMessage}.',\n  [ErrorCode.FETCH_STATUS]:\n    'Fetch server returned an HTTP error status. HTTP status: {$httpStatus}.'\n};\n\n// Note this is effectively a type system binding a code to params. This approach overlaps with the\n// role of TS interfaces, but works well for a few reasons:\n// 1) JS is unaware of TS interfaces, eg we can't test for interface implementation in JS\n// 2) callers should have access to a human-readable summary of the error and this interpolates\n//    params into an error message;\n// 3) callers should be able to programmatically access data associated with an error, which\n//    ErrorData provides.\ninterface ErrorParams {\n  [ErrorCode.STORAGE_OPEN]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_GET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_SET]: { originalErrorMessage: string | undefined };\n  [ErrorCode.STORAGE_DELETE]: { originalErrorMessage: string | undefined };\n  [ErrorCode.FETCH_NETWORK]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_THROTTLE]: { throttleEndTimeMillis: number };\n  [ErrorCode.FETCH_PARSE]: { originalErrorMessage: string };\n  [ErrorCode.FETCH_STATUS]: { httpStatus: number };\n}\n\nexport const ERROR_FACTORY = new ErrorFactory<ErrorCode, ErrorParams>(\n  'remoteconfig' /* service */,\n  'Remote Config' /* service name */,\n  ERROR_DESCRIPTION_MAP\n);\n\n// Note how this is like typeof/instanceof, but for ErrorCode.\nexport function hasErrorCode(e: Error, errorCode: ErrorCode): boolean {\n  return e instanceof FirebaseError && e.code.indexOf(errorCode) !== -1;\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseInstallations } from '@firebase/installations-types';\nimport {\n  FetchResponse,\n  RemoteConfigFetchClient,\n  FirebaseRemoteConfigObject,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { getUserLanguage } from '../language';\n\n/**\n * Defines request body parameters required to call the fetch API:\n * https://firebase.google.com/docs/reference/remote-config/rest\n *\n * <p>Not exported because this file encapsulates REST API specifics.\n *\n * <p>Not passing User Properties because Analytics' source of truth on Web is server-side.\n */\ninterface FetchRequestBody {\n  // Disables camelcase linting for request body params.\n  /* eslint-disable camelcase*/\n  sdk_version: string;\n  app_instance_id: string;\n  app_instance_id_token: string;\n  app_id: string;\n  language_code: string;\n  /* eslint-enable camelcase */\n}\n\n/**\n * Implements the Client abstraction for the Remote Config REST API.\n */\nexport class RestClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly firebaseInstallations: FirebaseInstallations,\n    private readonly sdkVersion: string,\n    private readonly namespace: string,\n    private readonly projectId: string,\n    private readonly apiKey: string,\n    private readonly appId: string\n  ) {}\n\n  /**\n   * Fetches from the Remote Config REST API.\n   *\n   * @throws a {@link ErrorCode.FETCH_NETWORK} error if {@link GlobalFetch#fetch} can't\n   * connect to the network.\n   * @throws a {@link ErrorCode.FETCH_PARSE} error if {@link Response#json} can't parse the\n   * fetch response.\n   * @throws a {@link ErrorCode.FETCH_STATUS} error if the service returns an HTTP error status.\n   */\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const [installationId, installationToken] = await Promise.all([\n      this.firebaseInstallations.getId(),\n      this.firebaseInstallations.getToken()\n    ]);\n\n    const urlBase =\n      window.FIREBASE_REMOTE_CONFIG_URL_BASE ||\n      'https://firebaseremoteconfig.googleapis.com';\n\n    const url = `${urlBase}/v1/projects/${this.projectId}/namespaces/${this.namespace}:fetch?key=${this.apiKey}`;\n\n    const headers = {\n      'Content-Type': 'application/json',\n      'Content-Encoding': 'gzip',\n      // Deviates from pure decorator by not passing max-age header since we don't currently have\n      // service behavior using that header.\n      'If-None-Match': request.eTag || '*'\n    };\n\n    const requestBody: FetchRequestBody = {\n      /* eslint-disable camelcase */\n      sdk_version: this.sdkVersion,\n      app_instance_id: installationId,\n      app_instance_id_token: installationToken,\n      app_id: this.appId,\n      language_code: getUserLanguage()\n      /* eslint-enable camelcase */\n    };\n\n    const options = {\n      method: 'POST',\n      headers,\n      body: JSON.stringify(requestBody)\n    };\n\n    // This logic isn't REST-specific, but shimming abort logic isn't worth another decorator.\n    const fetchPromise = fetch(url, options);\n    const timeoutPromise = new Promise((_resolve, reject) => {\n      // Maps async event listener to Promise API.\n      request.signal.addEventListener(() => {\n        // Emulates https://heycam.github.io/webidl/#aborterror\n        const error = new Error('The operation was aborted.');\n        error.name = 'AbortError';\n        reject(error);\n      });\n    });\n\n    let response;\n    try {\n      await Promise.race([fetchPromise, timeoutPromise]);\n      response = await fetchPromise;\n    } catch (originalError) {\n      let errorCode = ErrorCode.FETCH_NETWORK;\n      if (originalError.name === 'AbortError') {\n        errorCode = ErrorCode.FETCH_TIMEOUT;\n      }\n      throw ERROR_FACTORY.create(errorCode, {\n        originalErrorMessage: originalError.message\n      });\n    }\n\n    let status = response.status;\n\n    // Normalizes nullable header to optional.\n    const responseEtag = response.headers.get('ETag') || undefined;\n\n    let config: FirebaseRemoteConfigObject | undefined;\n    let state: string | undefined;\n\n    // JSON parsing throws SyntaxError if the response body isn't a JSON string.\n    // Requesting application/json and checking for a 200 ensures there's JSON data.\n    if (response.status === 200) {\n      let responseBody;\n      try {\n        responseBody = await response.json();\n      } catch (originalError) {\n        throw ERROR_FACTORY.create(ErrorCode.FETCH_PARSE, {\n          originalErrorMessage: originalError.message\n        });\n      }\n      config = responseBody['entries'];\n      state = responseBody['state'];\n    }\n\n    // Normalizes based on legacy state.\n    if (state === 'INSTANCE_STATE_UNSPECIFIED') {\n      status = 500;\n    } else if (state === 'NO_CHANGE') {\n      status = 304;\n    } else if (state === 'NO_TEMPLATE' || state === 'EMPTY_CONFIG') {\n      // These cases can be fixed remotely, so normalize to safe value.\n      config = {};\n    }\n\n    // Normalize to exception-based control flow for non-success cases.\n    // Encapsulates HTTP specifics in this class as much as possible. Status is still the best for\n    // differentiating success states (200 from 304; the state body param is undefined in a\n    // standard 304).\n    if (status !== 304 && status !== 200) {\n      throw ERROR_FACTORY.create(ErrorCode.FETCH_STATUS, {\n        httpStatus: status\n      });\n    }\n\n    return { status, eTag: responseEtag, config };\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Attempts to get the most accurate browser language setting.\n *\n * <p>Adapted from getUserLanguage in packages/auth/src/utils.js for TypeScript.\n *\n * <p>Defers default language specification to server logic for consistency.\n *\n * @param navigatorLanguage Enables tests to override read-only {@link NavigatorLanguage}.\n */\nexport function getUserLanguage(\n  navigatorLanguage: NavigatorLanguage = navigator\n): string {\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    (navigatorLanguage.languages && navigatorLanguage.languages[0]) ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language\n    // Polyfill otherwise.\n  );\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\n/**\n * Defines a client, as in https://en.wikipedia.org/wiki/Client%E2%80%93server_model, for the\n * Remote Config server (https://firebase.google.com/docs/reference/remote-config/rest).\n *\n * <p>Abstracts throttle, response cache and network implementation details.\n *\n * <p>Modeled after the native {@link GlobalFetch} interface, which is relatively modern and\n * convenient, but simplified for Remote Config's use case.\n *\n * Disambiguation: {@link GlobalFetch} interface and the Remote Config service define \"fetch\"\n * methods. The RestClient uses the former to make HTTP calls. This interface abstracts the latter.\n */\nexport interface RemoteConfigFetchClient {\n  /**\n   * @throws if response status is not 200 or 304.\n   */\n  fetch(request: FetchRequest): Promise<FetchResponse>;\n}\n\n/**\n * Defines a self-descriptive reference for config key-value pairs.\n */\nexport interface FirebaseRemoteConfigObject {\n  [key: string]: string;\n}\n\n/**\n * Shims a minimal AbortSignal.\n *\n * <p>AbortController's AbortSignal conveniently decouples fetch timeout logic from other aspects\n * of networking, such as retries. Firebase doesn't use AbortController enough to justify a\n * polyfill recommendation, like we do with the Fetch API, but this minimal shim can easily be\n * swapped out if/when we do.\n */\nexport class RemoteConfigAbortSignal {\n  listeners: Array<() => void> = [];\n  addEventListener(listener: () => void): void {\n    this.listeners.push(listener);\n  }\n  abort(): void {\n    this.listeners.forEach(listener => listener());\n  }\n}\n\n/**\n * Defines per-request inputs for the Remote Config fetch request.\n *\n * <p>Modeled after the native {@link Request} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchRequest {\n  /**\n   * Uses cached config if it is younger than this age.\n   *\n   * <p>Required because it's defined by settings, which always have a value.\n   *\n   * <p>Comparable to passing `headers = { 'Cache-Control': max-age <maxAge> }` to the native\n   * Fetch API.\n   */\n  cacheMaxAgeMillis: number;\n\n  /**\n   * An event bus for the signal to abort a request.\n   *\n   * <p>Required because all requests should be abortable.\n   *\n   * <p>Comparable to the native\n   * Fetch API's \"signal\" field on its request configuration object\n   * https://fetch.spec.whatwg.org/#dom-requestinit-signal.\n   *\n   * <p>Disambiguation: Remote Config commonly refers to API inputs as\n   * \"signals\". See the private ConfigFetchRequestBody interface for those:\n   * http://google3/firebase/remote_config/web/src/core/rest_client.ts?l=14&rcl=255515243.\n   */\n  signal: RemoteConfigAbortSignal;\n\n  /**\n   * The ETag header value from the last response.\n   *\n   * <p>Optional in case this is the first request.\n   *\n   * <p>Comparable to passing `headers = { 'If-None-Match': <eTag> }` to the native Fetch API.\n   */\n  eTag?: string;\n}\n\n/**\n * Defines a successful response (200 or 304).\n *\n * <p>Modeled after the native {@link Response} interface, but simplified for Remote Config's\n * use case.\n */\nexport interface FetchResponse {\n  /**\n   * The HTTP status, which is useful for differentiating success responses with data from\n   * those without.\n   *\n   * <p>{@link RemoteConfigClient} is modeled after the native {@link GlobalFetch} interface, so\n   * HTTP status is first-class.\n   *\n   * <p>Disambiguation: the fetch response returns a legacy \"state\" value that is redundant with the\n   * HTTP status code. The former is normalized into the latter.\n   */\n  status: number;\n\n  /**\n   * Defines the ETag response header value.\n   *\n   * <p>Only defined for 200 and 304 responses.\n   */\n  eTag?: string;\n\n  /**\n   * Defines the map of parameters returned as \"entries\" in the fetch response body.\n   *\n   * <p>Only defined for 200 responses.\n   */\n  config?: FirebaseRemoteConfigObject;\n\n  // Note: we're not extracting experiment metadata until\n  // ABT and Analytics have Web SDKs.\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { Value as ValueType, ValueSource } from '@firebase/remote-config-types';\n\nconst DEFAULT_VALUE_FOR_BOOLEAN = false;\nconst DEFAULT_VALUE_FOR_STRING = '';\nconst DEFAULT_VALUE_FOR_NUMBER = 0;\n\nconst BOOLEAN_TRUTHY_VALUES = ['1', 'true', 't', 'yes', 'y', 'on'];\n\nexport class Value implements ValueType {\n  constructor(\n    private readonly _source: ValueSource,\n    private readonly _value: string = DEFAULT_VALUE_FOR_STRING\n  ) {}\n\n  asString(): string {\n    return this._value;\n  }\n\n  asBoolean(): boolean {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_BOOLEAN;\n    }\n    return BOOLEAN_TRUTHY_VALUES.indexOf(this._value.toLowerCase()) >= 0;\n  }\n\n  asNumber(): number {\n    if (this._source === 'static') {\n      return DEFAULT_VALUE_FOR_NUMBER;\n    }\n    let num = Number(this._value);\n    if (isNaN(num)) {\n      num = DEFAULT_VALUE_FOR_NUMBER;\n    }\n    return num;\n  }\n\n  getSource(): ValueSource {\n    return this._source;\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FirebaseApp } from '@firebase/app-types';\nimport {\n  RemoteConfig as RemoteConfigType,\n  FetchStatus,\n  Settings,\n  Value as ValueType,\n  LogLevel as RemoteConfigLogLevel\n} from '@firebase/remote-config-types';\nimport { StorageCache } from './storage/storage_cache';\nimport {\n  RemoteConfigFetchClient,\n  RemoteConfigAbortSignal\n} from './client/remote_config_fetch_client';\nimport { Value } from './value';\nimport { ErrorCode, hasErrorCode } from './errors';\nimport { Storage } from './storage/storage';\nimport { Logger, LogLevel as FirebaseLogLevel } from '@firebase/logger';\n\nconst DEFAULT_FETCH_TIMEOUT_MILLIS = 60 * 1000; // One minute\nconst DEFAULT_CACHE_MAX_AGE_MILLIS = 12 * 60 * 60 * 1000; // Twelve hours.\n\n/**\n * Encapsulates business logic mapping network and storage dependencies to the public SDK API.\n *\n * See {@link https://github.com/FirebasePrivate/firebase-js-sdk/blob/master/packages/firebase/index.d.ts|interface documentation} for method descriptions.\n */\nexport class RemoteConfig implements RemoteConfigType {\n  // Tracks completion of initialization promise.\n  private _isInitializationComplete = false;\n\n  // De-duplicates initialization calls.\n  private _initializePromise?: Promise<void>;\n\n  settings: Settings = {\n    fetchTimeoutMillis: DEFAULT_FETCH_TIMEOUT_MILLIS,\n    minimumFetchIntervalMillis: DEFAULT_CACHE_MAX_AGE_MILLIS\n  };\n\n  defaultConfig: { [key: string]: string | number | boolean } = {};\n\n  // Based on packages/firestore/src/util/log.ts but not static because we need per-instance levels\n  // to differentiate 2p and 3p use-cases.\n  setLogLevel(logLevel: RemoteConfigLogLevel): void {\n    switch (logLevel) {\n      case 'debug':\n        this._logger.logLevel = FirebaseLogLevel.DEBUG;\n        break;\n      case 'silent':\n        this._logger.logLevel = FirebaseLogLevel.SILENT;\n        break;\n      default:\n        this._logger.logLevel = FirebaseLogLevel.ERROR;\n    }\n  }\n\n  get fetchTimeMillis(): number {\n    return this._storageCache.getLastSuccessfulFetchTimestampMillis() || -1;\n  }\n\n  get lastFetchStatus(): FetchStatus {\n    return this._storageCache.getLastFetchStatus() || 'no-fetch-yet';\n  }\n\n  constructor(\n    // Required by FirebaseServiceFactory interface.\n    readonly app: FirebaseApp,\n    // JS doesn't support private yet\n    // (https://github.com/tc39/proposal-class-fields#private-fields), so we hint using an\n    // underscore prefix.\n    private readonly _client: RemoteConfigFetchClient,\n    private readonly _storageCache: StorageCache,\n    private readonly _storage: Storage,\n    private readonly _logger: Logger\n  ) {}\n\n  async activate(): Promise<boolean> {\n    const [lastSuccessfulFetchResponse, activeConfigEtag] = await Promise.all([\n      this._storage.getLastSuccessfulFetchResponse(),\n      this._storage.getActiveConfigEtag()\n    ]);\n    if (\n      !lastSuccessfulFetchResponse ||\n      !lastSuccessfulFetchResponse.config ||\n      !lastSuccessfulFetchResponse.eTag ||\n      lastSuccessfulFetchResponse.eTag === activeConfigEtag\n    ) {\n      // Either there is no successful fetched config, or is the same as current active\n      // config.\n      return false;\n    }\n    await Promise.all([\n      this._storageCache.setActiveConfig(lastSuccessfulFetchResponse.config),\n      this._storage.setActiveConfigEtag(lastSuccessfulFetchResponse.eTag)\n    ]);\n    return true;\n  }\n\n  ensureInitialized(): Promise<void> {\n    if (!this._initializePromise) {\n      this._initializePromise = this._storageCache\n        .loadFromStorage()\n        .then(() => {\n          this._isInitializationComplete = true;\n        });\n    }\n    return this._initializePromise;\n  }\n\n  /**\n   * @throws a {@link ErrorCode.FETCH_CLIENT_TIMEOUT} if the request takes longer than\n   * {@link Settings.fetchTimeoutInSeconds} or\n   * {@link DEFAULT_FETCH_TIMEOUT_SECONDS}.\n   */\n  async fetch(): Promise<void> {\n    // Aborts the request after the given timeout, causing the fetch call to\n    // reject with an AbortError.\n    //\n    // <p>Aborting after the request completes is a no-op, so we don't need a\n    // corresponding clearTimeout.\n    //\n    // Locating abort logic here because:\n    // * it uses a developer setting (timeout)\n    // * it applies to all retries (like curl's max-time arg)\n    // * it is consistent with the Fetch API's signal input\n    const abortSignal = new RemoteConfigAbortSignal();\n\n    setTimeout(async () => {\n      // Note a very low delay, eg < 10ms, can elapse before listeners are initialized.\n      abortSignal.abort();\n    }, this.settings.fetchTimeoutMillis);\n\n    // Catches *all* errors thrown by client so status can be set consistently.\n    try {\n      await this._client.fetch({\n        cacheMaxAgeMillis: this.settings.minimumFetchIntervalMillis,\n        signal: abortSignal\n      });\n\n      await this._storageCache.setLastFetchStatus('success');\n    } catch (e) {\n      const lastFetchStatus = hasErrorCode(e, ErrorCode.FETCH_THROTTLE)\n        ? 'throttle'\n        : 'failure';\n      await this._storageCache.setLastFetchStatus(lastFetchStatus);\n      throw e;\n    }\n  }\n\n  async fetchAndActivate(): Promise<boolean> {\n    await this.fetch();\n    return this.activate();\n  }\n\n  getAll(): { [key: string]: ValueType } {\n    return getAllKeys(\n      this._storageCache.getActiveConfig(),\n      this.defaultConfig\n    ).reduce((allConfigs, key) => {\n      allConfigs[key] = this.getValue(key);\n      return allConfigs;\n    }, {} as { [key: string]: ValueType });\n  }\n\n  getBoolean(key: string): boolean {\n    return this.getValue(key).asBoolean();\n  }\n\n  getNumber(key: string): number {\n    return this.getValue(key).asNumber();\n  }\n\n  getString(key: string): string {\n    return this.getValue(key).asString();\n  }\n\n  getValue(key: string): ValueType {\n    if (!this._isInitializationComplete) {\n      this._logger.debug(\n        `A value was requested for key \"${key}\" before SDK initialization completed.` +\n          ' Await on ensureInitialized if the intent was to get a previously activated value.'\n      );\n    }\n    const activeConfig = this._storageCache.getActiveConfig();\n    if (activeConfig && activeConfig[key] !== undefined) {\n      return new Value('remote', activeConfig[key]);\n    } else if (this.defaultConfig && this.defaultConfig[key] !== undefined) {\n      return new Value('default', String(this.defaultConfig[key]));\n    }\n    this._logger.debug(\n      `Returning static value for key \"${key}\".` +\n        ' Define a default or remote value if this is unintentional.'\n    );\n    return new Value('static');\n  }\n}\n\n/**\n * Dedupes and returns an array of all the keys of the received objects.\n */\nfunction getAllKeys(obj1: {} = {}, obj2: {} = {}): string[] {\n  return Object.keys({ ...obj1, ...obj2 });\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport {\n  FetchResponse,\n  FirebaseRemoteConfigObject\n} from '../client/remote_config_fetch_client';\nimport { ERROR_FACTORY, ErrorCode } from '../errors';\nimport { FirebaseError } from '@firebase/util';\n\n/**\n * Converts an error event associated with a {@link IDBRequest} to a {@link FirebaseError}.\n */\nfunction toFirebaseError(event: Event, errorCode: ErrorCode): FirebaseError {\n  const originalError = (event.target as IDBRequest).error || undefined;\n  return ERROR_FACTORY.create(errorCode, {\n    originalErrorMessage: originalError && originalError.message\n  });\n}\n\n/**\n * A general-purpose store keyed by app + namespace + {@link\n * ProjectNamespaceKeyFieldValue}.\n *\n * <p>The Remote Config SDK can be used with multiple app installations, and each app can interact\n * with multiple namespaces, so this store uses app (ID + name) and namespace as common parent keys\n * for a set of key-value pairs. See {@link Storage#createCompositeKey}.\n *\n * <p>Visible for testing.\n */\nexport const APP_NAMESPACE_STORE = 'app_namespace_store';\n\nconst DB_NAME = 'firebase_remote_config';\nconst DB_VERSION = 1;\n\n/**\n * Encapsulates metadata concerning throttled fetch requests.\n */\nexport interface ThrottleMetadata {\n  // The number of times fetch has backed off. Used for resuming backoff after a timeout.\n  backoffCount: number;\n  // The Unix timestamp in milliseconds when callers can retry a request.\n  throttleEndTimeMillis: number;\n}\n\n/**\n * Provides type-safety for the \"key\" field used by {@link APP_NAMESPACE_STORE}.\n *\n * <p>This seems like a small price to avoid potentially subtle bugs caused by a typo.\n */\ntype ProjectNamespaceKeyFieldValue =\n  | 'active_config'\n  | 'active_config_etag'\n  | 'last_fetch_status'\n  | 'last_successful_fetch_timestamp_millis'\n  | 'last_successful_fetch_response'\n  | 'settings'\n  | 'throttle_metadata';\n\n// Visible for testing.\nexport function openDatabase(): Promise<IDBDatabase> {\n  return new Promise((resolve, reject) => {\n    const request = indexedDB.open(DB_NAME, DB_VERSION);\n    request.onerror = event => {\n      reject(toFirebaseError(event, ErrorCode.STORAGE_OPEN));\n    };\n    request.onsuccess = event => {\n      resolve((event.target as IDBOpenDBRequest).result);\n    };\n    request.onupgradeneeded = event => {\n      const db = (event.target as IDBOpenDBRequest).result;\n\n      // We don't use 'break' in this switch statement, the fall-through\n      // behavior is what we want, because if there are multiple versions between\n      // the old version and the current version, we want ALL the migrations\n      // that correspond to those versions to run, not only the last one.\n      // eslint-disable-next-line default-case\n      switch (event.oldVersion) {\n        case 0:\n          db.createObjectStore(APP_NAMESPACE_STORE, {\n            keyPath: 'compositeKey'\n          });\n      }\n    };\n  });\n}\n\n/**\n * Abstracts data persistence.\n */\nexport class Storage {\n  /**\n   * @param appId enables storage segmentation by app (ID + name).\n   * @param appName enables storage segmentation by app (ID + name).\n   * @param namespace enables storage segmentation by namespace.\n   */\n  constructor(\n    private readonly appId: string,\n    private readonly appName: string,\n    private readonly namespace: string,\n    private readonly openDbPromise = openDatabase()\n  ) {}\n\n  getLastFetchStatus(): Promise<FetchStatus | undefined> {\n    return this.get<FetchStatus>('last_fetch_status');\n  }\n\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    return this.set<FetchStatus>('last_fetch_status', status);\n  }\n\n  // This is comparable to a cache entry timestamp. If we need to expire other data, we could\n  // consider adding timestamp to all storage records and an optional max age arg to getters.\n  getLastSuccessfulFetchTimestampMillis(): Promise<number | undefined> {\n    return this.get<number>('last_successful_fetch_timestamp_millis');\n  }\n\n  setLastSuccessfulFetchTimestampMillis(timestamp: number): Promise<void> {\n    return this.set<number>(\n      'last_successful_fetch_timestamp_millis',\n      timestamp\n    );\n  }\n\n  getLastSuccessfulFetchResponse(): Promise<FetchResponse | undefined> {\n    return this.get<FetchResponse>('last_successful_fetch_response');\n  }\n\n  setLastSuccessfulFetchResponse(response: FetchResponse): Promise<void> {\n    return this.set<FetchResponse>('last_successful_fetch_response', response);\n  }\n\n  getActiveConfig(): Promise<FirebaseRemoteConfigObject | undefined> {\n    return this.get<FirebaseRemoteConfigObject>('active_config');\n  }\n\n  setActiveConfig(config: FirebaseRemoteConfigObject): Promise<void> {\n    return this.set<FirebaseRemoteConfigObject>('active_config', config);\n  }\n\n  getActiveConfigEtag(): Promise<string | undefined> {\n    return this.get<string>('active_config_etag');\n  }\n\n  setActiveConfigEtag(etag: string): Promise<void> {\n    return this.set<string>('active_config_etag', etag);\n  }\n\n  getThrottleMetadata(): Promise<ThrottleMetadata | undefined> {\n    return this.get<ThrottleMetadata>('throttle_metadata');\n  }\n\n  setThrottleMetadata(metadata: ThrottleMetadata): Promise<void> {\n    return this.set<ThrottleMetadata>('throttle_metadata', metadata);\n  }\n\n  deleteThrottleMetadata(): Promise<void> {\n    return this.delete('throttle_metadata');\n  }\n\n  async get<T>(key: ProjectNamespaceKeyFieldValue): Promise<T | undefined> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readonly');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.get(compositeKey);\n        request.onerror = event => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_GET));\n        };\n        request.onsuccess = event => {\n          const result = (event.target as IDBRequest).result;\n          if (result) {\n            resolve(result.value);\n          } else {\n            resolve(undefined);\n          }\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_GET, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  async set<T>(key: ProjectNamespaceKeyFieldValue, value: T): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.put({\n          compositeKey,\n          value\n        });\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_SET));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_SET, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  async delete(key: ProjectNamespaceKeyFieldValue): Promise<void> {\n    const db = await this.openDbPromise;\n    return new Promise((resolve, reject) => {\n      const transaction = db.transaction([APP_NAMESPACE_STORE], 'readwrite');\n      const objectStore = transaction.objectStore(APP_NAMESPACE_STORE);\n      const compositeKey = this.createCompositeKey(key);\n      try {\n        const request = objectStore.delete(compositeKey);\n        request.onerror = (event: Event) => {\n          reject(toFirebaseError(event, ErrorCode.STORAGE_DELETE));\n        };\n        request.onsuccess = () => {\n          resolve();\n        };\n      } catch (e) {\n        reject(\n          ERROR_FACTORY.create(ErrorCode.STORAGE_DELETE, {\n            originalErrorMessage: e && e.message\n          })\n        );\n      }\n    });\n  }\n\n  // Facilitates composite key functionality (which is unsupported in IE).\n  createCompositeKey(key: ProjectNamespaceKeyFieldValue): string {\n    return [this.appId, this.appName, this.namespace, key].join();\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport { FetchStatus } from '@firebase/remote-config-types';\nimport { FirebaseRemoteConfigObject } from '../client/remote_config_fetch_client';\nimport { Storage } from './storage';\n\n/**\n * A memory cache layer over storage to support the SDK's synchronous read requirements.\n */\nexport class StorageCache {\n  constructor(private readonly storage: Storage) {}\n\n  /**\n   * Memory caches.\n   */\n  private lastFetchStatus?: FetchStatus;\n  private lastSuccessfulFetchTimestampMillis?: number;\n  private activeConfig?: FirebaseRemoteConfigObject;\n\n  /**\n   * Memory-only getters\n   */\n  getLastFetchStatus(): FetchStatus | undefined {\n    return this.lastFetchStatus;\n  }\n\n  getLastSuccessfulFetchTimestampMillis(): number | undefined {\n    return this.lastSuccessfulFetchTimestampMillis;\n  }\n\n  getActiveConfig(): FirebaseRemoteConfigObject | undefined {\n    return this.activeConfig;\n  }\n\n  /**\n   * Read-ahead getter\n   */\n  async loadFromStorage(): Promise<void> {\n    const lastFetchStatusPromise = this.storage.getLastFetchStatus();\n    const lastSuccessfulFetchTimestampMillisPromise = this.storage.getLastSuccessfulFetchTimestampMillis();\n    const activeConfigPromise = this.storage.getActiveConfig();\n\n    // Note:\n    // 1. we consistently check for undefined to avoid clobbering defined values\n    //   in memory\n    // 2. we defer awaiting to improve readability, as opposed to destructuring\n    //   a Promise.all result, for example\n\n    const lastFetchStatus = await lastFetchStatusPromise;\n    if (lastFetchStatus) {\n      this.lastFetchStatus = lastFetchStatus;\n    }\n\n    const lastSuccessfulFetchTimestampMillis = await lastSuccessfulFetchTimestampMillisPromise;\n    if (lastSuccessfulFetchTimestampMillis) {\n      this.lastSuccessfulFetchTimestampMillis = lastSuccessfulFetchTimestampMillis;\n    }\n\n    const activeConfig = await activeConfigPromise;\n    if (activeConfig) {\n      this.activeConfig = activeConfig;\n    }\n  }\n\n  /**\n   * Write-through setters\n   */\n  setLastFetchStatus(status: FetchStatus): Promise<void> {\n    this.lastFetchStatus = status;\n    return this.storage.setLastFetchStatus(status);\n  }\n\n  setLastSuccessfulFetchTimestampMillis(\n    timestampMillis: number\n  ): Promise<void> {\n    this.lastSuccessfulFetchTimestampMillis = timestampMillis;\n    return this.storage.setLastSuccessfulFetchTimestampMillis(timestampMillis);\n  }\n\n  setActiveConfig(activeConfig: FirebaseRemoteConfigObject): Promise<void> {\n    this.activeConfig = activeConfig;\n    return this.storage.setActiveConfig(activeConfig);\n  }\n}\n","/**\n * @license\n * Copyright 2019 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport {\n  RemoteConfigAbortSignal,\n  RemoteConfigFetchClient,\n  FetchResponse,\n  FetchRequest\n} from './remote_config_fetch_client';\nimport { ThrottleMetadata, Storage } from '../storage/storage';\nimport { ErrorCode, ERROR_FACTORY } from '../errors';\nimport { FirebaseError, calculateBackoffMillis } from '@firebase/util';\n\n/**\n * Supports waiting on a backoff by:\n *\n * <ul>\n *   <li>Promisifying setTimeout, so we can set a timeout in our Promise chain</li>\n *   <li>Listening on a signal bus for abort events, just like the Fetch API</li>\n *   <li>Failing in the same way the Fetch API fails, so timing out a live request and a throttled\n *       request appear the same.</li>\n * </ul>\n *\n * <p>Visible for testing.\n */\nexport function setAbortableTimeout(\n  signal: RemoteConfigAbortSignal,\n  throttleEndTimeMillis: number\n): Promise<void> {\n  return new Promise((resolve, reject) => {\n    // Derives backoff from given end time, normalizing negative numbers to zero.\n    const backoffMillis = Math.max(throttleEndTimeMillis - Date.now(), 0);\n\n    const timeout = setTimeout(resolve, backoffMillis);\n\n    // Adds listener, rather than sets onabort, because signal is a shared object.\n    signal.addEventListener(() => {\n      clearTimeout(timeout);\n\n      // If the request completes before this timeout, the rejection has no effect.\n      reject(\n        ERROR_FACTORY.create(ErrorCode.FETCH_THROTTLE, {\n          throttleEndTimeMillis\n        })\n      );\n    });\n  });\n}\n\ntype RetriableError = FirebaseError & { customData: { httpStatus: string } };\n/**\n * Returns true if the {@link Error} indicates a fetch request may succeed later.\n */\nfunction isRetriableError(e: Error): e is RetriableError {\n  if (!(e instanceof FirebaseError) || !e.customData) {\n    return false;\n  }\n\n  // Uses string index defined by ErrorData, which FirebaseError implements.\n  const httpStatus = Number(e.customData['httpStatus']);\n\n  return (\n    httpStatus === 429 ||\n    httpStatus === 500 ||\n    httpStatus === 503 ||\n    httpStatus === 504\n  );\n}\n\n/**\n * Decorates a Client with retry logic.\n *\n * <p>Comparable to CachingClient, but uses backoff logic instead of cache max age and doesn't cache\n * responses (because the SDK has no use for error responses).\n */\nexport class RetryingClient implements RemoteConfigFetchClient {\n  constructor(\n    private readonly client: RemoteConfigFetchClient,\n    private readonly storage: Storage\n  ) {}\n\n  async fetch(request: FetchRequest): Promise<FetchResponse> {\n    const throttleMetadata = (await this.storage.getThrottleMetadata()) || {\n      backoffCount: 0,\n      throttleEndTimeMillis: Date.now()\n    };\n\n    return this.attemptFetch(request, throttleMetadata);\n  }\n\n  /**\n   * A recursive helper for attempting a fetch request repeatedly.\n   *\n   * @throws any non-retriable errors.\n   */\n  async attemptFetch(\n    request: FetchRequest,\n    { throttleEndTimeMillis, backoffCount }: ThrottleMetadata\n  ): Promise<FetchResponse> {\n    // Starts with a (potentially zero) timeout to support resumption from stored state.\n    // Ensures the throttle end time is honored if the last attempt timed out.\n    // Note the SDK will never make a request if the fetch timeout expires at this point.\n    await setAbortableTimeout(request.signal, throttleEndTimeMillis);\n\n    try {\n      const response = await this.client.fetch(request);\n\n      // Note the SDK only clears throttle state if response is success or non-retriable.\n      await this.storage.deleteThrottleMetadata();\n\n      return response;\n    } catch (e) {\n      if (!isRetriableError(e)) {\n        throw e;\n      }\n\n      // Increments backoff state.\n      const throttleMetadata = {\n        throttleEndTimeMillis:\n          Date.now() + calculateBackoffMillis(backoffCount),\n        backoffCount: backoffCount + 1\n      };\n\n      // Persists state.\n      await this.storage.setThrottleMetadata(throttleMetadata);\n\n      return this.attemptFetch(request, throttleMetadata);\n    }\n  }\n}\n","/**\n * @license\n * Copyright 2018 Google LLC\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *   http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\n\nimport firebase from '@firebase/app';\nimport { name, version } from '../package.json';\n\nfirebase.registerVersion(name, version, 'app');\n\nexport default firebase;\n"],"sourceRoot":""}